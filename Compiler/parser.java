
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Fri Feb 06 00:31:53 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Fri Feb 06 00:31:53 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\125\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\126\002\000\002\011\010\000\002\127" +
    "\002\000\002\012\011\000\002\130\002\000\002\012\011" +
    "\000\002\131\002\000\002\013\012\000\002\014\003\000" +
    "\002\014\002\000\002\132\002\000\002\133\002\000\002" +
    "\134\002\000\002\015\015\000\002\034\003\000\002\034" +
    "\003\000\002\124\003\000\002\124\004\000\002\071\006" +
    "\000\002\120\003\000\002\120\002\000\002\121\003\000" +
    "\002\121\004\000\002\075\003\000\002\075\003\000\002" +
    "\135\002\000\002\136\002\000\002\072\013\000\002\137" +
    "\002\000\002\073\012\000\002\122\003\000\002\122\002" +
    "\000\002\123\003\000\002\123\004\000\002\076\003\000" +
    "\002\140\002\000\002\141\002\000\002\142\002\000\002" +
    "\074\020\000\002\143\002\000\002\144\002\000\002\145" +
    "\002\000\002\007\020\000\002\146\002\000\002\147\002" +
    "\000\002\010\015\000\002\102\003\000\002\102\003\000" +
    "\002\103\003\000\002\103\004\000\002\100\004\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\101" +
    "\003\000\002\107\003\000\002\107\003\000\002\104\003" +
    "\000\002\104\002\000\002\105\003\000\002\105\004\000" +
    "\002\106\003\000\002\067\003\000\002\067\002\000\002" +
    "\066\003\000\002\066\004\000\002\070\005\000\002\150" +
    "\002\000\002\151\002\000\002\020\007\000\002\114\003" +
    "\000\002\114\002\000\002\117\003\000\002\117\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\110\003\000\002" +
    "\110\002\000\002\111\003\000\002\111\005\000\002\044" +
    "\006\000\002\016\003\000\002\016\002\000\002\064\004" +
    "\000\002\064\002\000\002\115\003\000\002\115\002\000" +
    "\002\116\006\000\002\021\006\000\002\022\004\000\002" +
    "\022\002\000\002\152\002\000\002\024\006\000\002\153" +
    "\002\000\002\023\014\000\002\025\004\000\002\026\004" +
    "\000\002\027\007\000\002\065\004\000\002\065\005\000" +
    "\002\030\006\000\002\031\006\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\046" +
    "\003\000\002\112\003\000\002\112\002\000\002\113\003" +
    "\000\002\113\005\000\002\047\005\000\002\047\003\000" +
    "\002\050\005\000\002\050\003\000\002\051\005\000\002" +
    "\051\003\000\002\052\005\000\002\052\003\000\002\053" +
    "\005\000\002\053\003\000\002\054\005\000\002\054\003" +
    "\000\002\055\005\000\002\055\003\000\002\056\005\000" +
    "\002\056\003\000\002\057\005\000\002\057\003\000\002" +
    "\060\005\000\002\060\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\006" +
    "\000\002\061\007\000\002\061\006\000\002\061\004\000" +
    "\002\061\003\000\002\062\005\000\002\062\006\000\002" +
    "\062\005\000\002\062\004\000\002\062\006\000\002\062" +
    "\003\000\002\063\005\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\004\000\002" +
    "\063\003\000\002\037\006\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\026\002\001\011\001\020\001\030\001\032" +
    "\001\034\001\040\001\071\001\072\001\105\001\001\002" +
    "\000\004\002\u0152\001\002\000\026\002\ufffd\011\uffeb\020" +
    "\uffeb\030\007\032\uffeb\034\011\040\uffeb\071\015\072\012" +
    "\105\uffeb\001\002\000\026\002\ufff6\011\ufff6\020\ufff6\030" +
    "\ufff6\032\ufff6\034\ufff6\040\ufff6\071\ufff6\072\ufff6\105\ufff6" +
    "\001\002\000\012\011\032\032\034\034\u0143\040\035\001" +
    "\002\000\026\002\ufff7\011\ufff7\020\ufff7\030\ufff7\032\ufff7" +
    "\034\ufff7\040\ufff7\071\ufff7\072\ufff7\105\ufff7\001\002\000" +
    "\004\015\u0136\001\002\000\004\105\245\001\002\000\014" +
    "\011\032\020\033\032\034\040\035\105\030\001\002\000" +
    "\026\002\ufff9\011\ufff9\020\ufff9\030\ufff9\032\ufff9\034\ufff9" +
    "\040\ufff9\071\ufff9\072\ufff9\105\ufff9\001\002\000\014\011" +
    "\uffec\020\uffec\032\uffec\040\uffec\105\uffec\001\002\000\026" +
    "\002\ufffc\011\ufffc\020\ufffc\030\ufffc\032\ufffc\034\ufffc\040" +
    "\ufffc\071\ufffc\072\ufffc\105\ufffc\001\002\000\026\002\ufff5" +
    "\011\ufff5\020\ufff5\030\ufff5\032\ufff5\034\ufff5\040\ufff5\071" +
    "\ufff5\072\ufff5\105\ufff5\001\002\000\026\002\ufffe\011\uffeb" +
    "\020\uffeb\030\007\032\uffeb\034\011\040\uffeb\071\015\072" +
    "\012\105\uffeb\001\002\000\026\002\ufffa\011\ufffa\020\ufffa" +
    "\030\ufffa\032\ufffa\034\ufffa\040\ufffa\071\ufffa\072\ufffa\105" +
    "\ufffa\001\002\000\004\002\000\001\002\000\026\002\ufff8" +
    "\011\ufff8\020\ufff8\030\ufff8\032\ufff8\034\ufff8\040\ufff8\071" +
    "\ufff8\072\ufff8\105\ufff8\001\002\000\026\002\ufffb\011\ufffb" +
    "\020\ufffb\030\ufffb\032\ufffb\034\ufffb\040\ufffb\071\ufffb\072" +
    "\ufffb\105\ufffb\001\002\000\012\004\uffc4\043\uffc4\064\uffc4" +
    "\106\uffc4\001\002\000\004\106\236\001\002\000\014\004" +
    "\uffba\043\uffba\064\uffba\070\114\106\uffba\001\002\000\014" +
    "\004\uffbe\043\uffbe\064\uffbe\070\uffbe\106\uffbe\001\002\000" +
    "\006\070\114\106\222\001\002\000\014\004\uffbf\043\uffbf" +
    "\064\uffbf\070\uffbf\106\uffbf\001\002\000\010\011\032\032" +
    "\034\040\035\001\002\000\014\004\uffc0\043\uffc0\064\uffc0" +
    "\070\uffc0\106\uffc0\001\002\000\014\004\uffc1\043\uffc1\064" +
    "\uffc1\070\uffc1\106\uffc1\001\002\000\004\106\037\001\002" +
    "\000\004\007\040\001\002\000\046\004\071\016\100\031" +
    "\064\044\073\047\065\052\061\053\101\056\076\057\063" +
    "\060\074\066\067\070\102\073\060\075\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\056\004\uff67\005\uff67" +
    "\010\uff67\013\uff67\017\uff67\026\uff67\035\uff67\036\uff67\042" +
    "\uff67\045\uff67\046\uff67\047\uff67\050\172\051\uff67\054\uff67" +
    "\055\uff67\056\uff67\062\uff67\064\uff67\065\uff67\067\174\070" +
    "\173\001\002\000\060\004\uff65\005\uff65\007\220\010\uff65" +
    "\013\uff65\017\uff65\026\uff65\035\uff65\036\uff65\042\uff65\045" +
    "\uff65\046\uff65\047\uff65\050\uff65\051\uff65\054\uff65\055\uff65" +
    "\056\uff65\062\uff65\064\uff65\065\uff65\067\uff65\070\uff65\001" +
    "\002\000\050\004\uff69\005\uff69\010\uff69\013\uff69\017\uff69" +
    "\026\uff69\035\uff69\036\uff69\042\uff69\045\uff69\046\uff69\047" +
    "\167\051\uff69\054\uff69\055\uff69\056\166\062\uff69\064\uff69" +
    "\065\uff69\001\002\000\076\004\uff45\005\uff45\006\uff45\007" +
    "\uff45\010\uff45\013\uff45\015\uff45\017\uff45\023\uff45\026\uff45" +
    "\035\uff45\036\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\054\uff45\055\uff45\056\uff45" +
    "\057\uff45\060\uff45\062\uff45\064\uff45\065\uff45\067\uff45\070" +
    "\uff45\001\002\000\044\004\uff6b\005\uff6b\010\uff6b\013\uff6b" +
    "\017\uff6b\026\uff6b\035\164\036\160\042\uff6b\045\163\046" +
    "\161\051\uff6b\054\uff6b\055\uff6b\062\uff6b\064\uff6b\065\uff6b" +
    "\001\002\000\034\004\uff6d\005\uff6d\010\uff6d\013\uff6d\017" +
    "\uff6d\026\156\042\uff6d\051\155\054\uff6d\055\uff6d\062\uff6d" +
    "\064\uff6d\065\uff6d\001\002\000\076\004\uff49\005\uff49\006" +
    "\uff49\007\uff49\010\uff49\013\uff49\015\uff49\017\uff49\023\uff49" +
    "\026\uff49\035\uff49\036\uff49\042\uff49\043\uff49\044\uff49\045" +
    "\uff49\046\uff49\047\uff49\050\uff49\051\uff49\054\uff49\055\uff49" +
    "\056\uff49\057\uff49\060\uff49\062\uff49\064\uff49\065\uff49\067" +
    "\uff49\070\uff49\001\002\000\076\004\uff4f\005\uff4f\006\205" +
    "\007\uff4f\010\uff4f\013\uff4f\015\uff4f\017\uff4f\023\204\026" +
    "\uff4f\035\uff4f\036\uff4f\042\uff4f\043\201\044\202\045\uff4f" +
    "\046\uff4f\047\uff4f\050\uff4f\051\uff4f\054\uff4f\055\uff4f\056" +
    "\uff4f\057\063\060\074\062\uff4f\064\uff4f\065\uff4f\067\uff4f" +
    "\070\uff4f\001\002\000\030\004\152\005\uff6f\010\uff6f\013" +
    "\uff6f\017\uff6f\042\uff6f\054\uff6f\055\uff6f\062\uff6f\064\uff6f" +
    "\065\uff6f\001\002\000\076\004\uff44\005\uff44\006\uff44\007" +
    "\uff44\010\uff44\013\uff44\015\uff44\017\uff44\023\uff44\026\uff44" +
    "\035\uff44\036\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046" +
    "\uff44\047\uff44\050\uff44\051\uff44\054\uff44\055\uff44\056\uff44" +
    "\057\uff44\060\uff44\062\uff44\064\uff44\065\uff44\067\uff44\070" +
    "\uff44\001\002\000\004\065\uffee\001\002\000\026\005\uff71" +
    "\010\uff71\013\150\017\uff71\042\uff71\054\uff71\055\uff71\062" +
    "\uff71\064\uff71\065\uff71\001\002\000\024\005\uff73\010\146" +
    "\017\uff73\042\uff73\054\uff73\055\uff73\062\uff73\064\uff73\065" +
    "\uff73\001\002\000\022\005\144\017\uff75\042\uff75\054\uff75" +
    "\055\uff75\062\uff75\064\uff75\065\uff75\001\002\000\020\017" +
    "\uff77\042\uff77\054\141\055\uff77\062\uff77\064\uff77\065\uff77" +
    "\001\002\000\076\004\uff41\005\uff41\006\uff41\007\uff41\010" +
    "\uff41\013\uff41\015\uff41\017\uff41\023\uff41\026\uff41\035\uff41" +
    "\036\uff41\042\uff41\043\uff41\044\uff41\045\uff41\046\uff41\047" +
    "\uff41\050\uff41\051\uff41\054\uff41\055\uff41\056\uff41\057\uff41" +
    "\060\uff41\062\uff41\064\uff41\065\uff41\067\uff41\070\uff41\001" +
    "\002\000\046\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\076\004\uff47\005\uff47\006\uff47\007\uff47\010" +
    "\uff47\013\uff47\015\uff47\017\uff47\023\uff47\026\uff47\035\uff47" +
    "\036\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047" +
    "\uff47\050\uff47\051\uff47\054\uff47\055\uff47\056\uff47\057\uff47" +
    "\060\uff47\062\uff47\064\uff47\065\uff47\067\uff47\070\uff47\001" +
    "\002\000\124\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59" +
    "\013\uff59\015\uff59\016\uff59\017\uff59\023\uff59\026\uff59\031" +
    "\uff59\035\uff59\036\uff59\042\uff59\043\uff59\044\uff59\045\uff59" +
    "\046\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054" +
    "\uff59\055\uff59\056\uff59\057\uff59\060\uff59\062\uff59\064\uff59" +
    "\065\uff59\066\uff59\067\uff59\070\uff59\073\uff59\075\uff59\102" +
    "\uff59\103\uff59\104\uff59\106\uff59\001\002\000\076\004\uff43" +
    "\005\uff43\006\uff43\007\uff43\010\uff43\013\uff43\015\uff43\017" +
    "\uff43\023\uff43\026\uff43\035\uff43\036\uff43\042\uff43\043\uff43" +
    "\044\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\054" +
    "\uff43\055\uff43\056\uff43\057\uff43\060\uff43\062\uff43\064\uff43" +
    "\065\uff43\067\uff43\070\uff43\001\002\000\046\004\uffe5\016" +
    "\uffe5\031\uffe5\044\uffe5\047\uffe5\052\uffe5\053\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\066\uffe5\070\uffe5\073\uffe5\075\uffe5\102" +
    "\uffe5\103\uffe5\104\uffe5\106\uffe5\001\002\000\006\062\uff7d" +
    "\065\uff7d\001\002\000\004\044\122\001\002\000\076\004" +
    "\uff3f\005\uff3f\006\uff3f\007\uff3f\010\uff3f\013\uff3f\015\uff3f" +
    "\017\uff3f\023\uff3f\026\uff3f\035\uff3f\036\uff3f\042\uff3f\043" +
    "\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f" +
    "\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\062\uff3f\064" +
    "\uff3f\065\uff3f\067\uff3f\070\uff3f\001\002\000\046\004\071" +
    "\016\100\031\064\044\073\047\065\052\061\053\101\056" +
    "\076\057\063\060\074\066\067\070\102\073\060\075\052" +
    "\102\077\103\062\104\044\106\070\001\002\000\046\004" +
    "\071\016\100\031\064\044\073\047\065\052\061\053\101" +
    "\056\076\057\063\060\074\066\067\070\102\073\060\075" +
    "\052\102\077\103\062\104\044\106\070\001\002\000\056" +
    "\004\071\011\032\016\100\031\064\032\034\040\035\044" +
    "\073\047\065\052\061\053\101\056\076\057\063\060\074" +
    "\066\067\070\102\073\060\075\052\102\077\103\062\104" +
    "\044\105\030\106\070\001\002\000\124\004\uff58\005\uff58" +
    "\006\uff58\007\uff58\010\uff58\013\uff58\015\uff58\016\uff58\017" +
    "\uff58\023\uff58\026\uff58\031\uff58\035\uff58\036\uff58\042\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58" +
    "\060\uff58\062\uff58\064\uff58\065\uff58\066\uff58\067\uff58\070" +
    "\uff58\073\uff58\075\uff58\102\uff58\103\uff58\104\uff58\106\uff58" +
    "\001\002\000\046\004\071\016\100\031\064\044\073\047" +
    "\065\052\061\053\101\056\076\057\063\060\074\066\067" +
    "\070\102\073\060\075\052\102\077\103\062\104\044\106" +
    "\070\001\002\000\046\004\uffe6\016\uffe6\031\uffe6\044\uffe6" +
    "\047\uffe6\052\uffe6\053\uffe6\056\uffe6\057\uffe6\060\uffe6\066" +
    "\uffe6\070\uffe6\073\uffe6\075\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\106\uffe6\001\002\000\076\004\uff46\005\uff46\006\uff46\007" +
    "\uff46\010\uff46\013\uff46\015\uff46\017\uff46\023\uff46\026\uff46" +
    "\035\uff46\036\uff46\042\uff46\043\uff46\044\uff46\045\uff46\046" +
    "\uff46\047\uff46\050\uff46\051\uff46\054\uff46\055\uff46\056\uff46" +
    "\057\uff46\060\uff46\062\uff46\064\uff46\065\uff46\067\uff46\070" +
    "\uff46\001\002\000\004\106\104\001\002\000\076\004\uff42" +
    "\005\uff42\006\uff42\007\uff42\010\uff42\013\uff42\015\uff42\017" +
    "\uff42\023\uff42\026\uff42\035\uff42\036\uff42\042\uff42\043\uff42" +
    "\044\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\054" +
    "\uff42\055\uff42\056\uff42\057\uff42\060\uff42\062\uff42\064\uff42" +
    "\065\uff42\067\uff42\070\uff42\001\002\000\046\004\071\016" +
    "\100\031\064\044\073\047\065\052\061\053\101\056\076" +
    "\057\063\060\074\066\067\070\102\073\060\075\052\102" +
    "\077\103\062\104\044\106\070\001\002\000\062\004\uff57" +
    "\005\uff57\007\uff57\010\uff57\013\uff57\015\uff57\017\uff57\026" +
    "\uff57\035\uff57\036\uff57\042\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\051\uff57\054\uff57\055\uff57\056\uff57\062\uff57\064" +
    "\uff57\065\uff57\067\uff57\070\uff57\001\002\000\076\004\uff40" +
    "\005\uff40\006\uff40\007\uff40\010\uff40\013\uff40\015\uff40\017" +
    "\uff40\023\uff40\026\uff40\035\uff40\036\uff40\042\uff40\043\uff40" +
    "\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\054" +
    "\uff40\055\uff40\056\uff40\057\uff40\060\uff40\062\uff40\064\uff40" +
    "\065\uff40\067\uff40\070\uff40\001\002\000\062\004\uff55\005" +
    "\uff55\007\uff55\010\uff55\013\uff55\015\uff55\017\uff55\026\uff55" +
    "\035\uff55\036\uff55\042\uff55\045\uff55\046\uff55\047\uff55\050" +
    "\uff55\051\uff55\054\uff55\055\uff55\056\uff55\062\uff55\064\uff55" +
    "\065\uff55\067\uff55\070\uff55\001\002\000\004\070\114\001" +
    "\002\000\004\064\112\001\002\000\004\064\111\001\002" +
    "\000\076\004\uff48\005\uff48\006\uff48\007\uff48\010\uff48\013" +
    "\uff48\015\uff48\017\uff48\023\uff48\026\uff48\035\uff48\036\uff48" +
    "\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050" +
    "\uff48\051\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060\uff48" +
    "\062\uff48\064\uff48\065\uff48\067\uff48\070\uff48\001\002\000" +
    "\046\004\071\016\100\031\064\044\073\047\065\052\061" +
    "\053\101\056\076\057\063\060\074\066\067\070\102\073" +
    "\060\075\052\102\077\103\062\104\044\106\070\001\002" +
    "\000\062\004\uff51\005\uff51\007\uff51\010\uff51\013\uff51\015" +
    "\uff51\017\uff51\026\uff51\035\uff51\036\uff51\042\uff51\045\uff51" +
    "\046\uff51\047\uff51\050\uff51\051\uff51\054\uff51\055\uff51\056" +
    "\uff51\062\uff51\064\uff51\065\uff51\067\uff51\070\uff51\001\002" +
    "\000\014\004\uffb7\043\uffb7\064\uffb7\070\uffb7\106\uffb7\001" +
    "\002\000\014\004\uffc3\043\uffc3\064\uffc3\070\114\106\uffc3" +
    "\001\002\000\014\004\uffb9\043\uffb9\064\uffb9\070\uffb9\106" +
    "\uffb9\001\002\000\014\004\uffb8\043\uffb8\064\uffb8\070\uffb8" +
    "\106\uffb8\001\002\000\062\004\uff50\005\uff50\007\uff50\010" +
    "\uff50\013\uff50\015\uff50\017\uff50\026\uff50\035\uff50\036\uff50" +
    "\042\uff50\045\uff50\046\uff50\047\uff50\050\uff50\051\uff50\054" +
    "\uff50\055\uff50\056\uff50\062\uff50\064\uff50\065\uff50\067\uff50" +
    "\070\uff50\001\002\000\062\004\uff56\005\uff56\007\uff56\010" +
    "\uff56\013\uff56\015\uff56\017\uff56\026\uff56\035\uff56\036\uff56" +
    "\042\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\054" +
    "\uff56\055\uff56\056\uff56\062\uff56\064\uff56\065\uff56\067\uff56" +
    "\070\uff56\001\002\000\056\004\071\011\032\016\100\031" +
    "\064\032\034\040\035\044\073\047\065\052\061\053\101" +
    "\056\076\057\063\060\074\066\067\070\102\073\060\075" +
    "\052\102\077\103\062\104\044\105\030\106\070\001\002" +
    "\000\004\064\137\001\002\000\014\004\uffc5\043\uffc5\064" +
    "\uffc5\070\114\106\uffc5\001\002\000\006\043\130\064\uffb5" +
    "\001\002\000\012\004\uffc6\043\uffc6\064\uffc6\106\uffc6\001" +
    "\002\000\016\007\uffb6\015\uffb6\017\uffb6\043\130\064\uffb6" +
    "\065\uffb6\001\002\000\046\004\071\016\100\031\064\044" +
    "\073\047\065\052\061\053\101\056\076\057\063\060\074" +
    "\066\067\070\102\073\060\075\052\102\077\103\062\104" +
    "\044\106\070\001\002\000\004\064\133\001\002\000\016" +
    "\007\uffb4\015\uffb4\017\uffb4\043\uffb4\064\uffb4\065\uffb4\001" +
    "\002\000\062\004\uff52\005\uff52\007\uff52\010\uff52\013\uff52" +
    "\015\uff52\017\uff52\026\uff52\035\uff52\036\uff52\042\uff52\045" +
    "\uff52\046\uff52\047\uff52\050\uff52\051\uff52\054\uff52\055\uff52" +
    "\056\uff52\062\uff52\064\uff52\065\uff52\067\uff52\070\uff52\001" +
    "\002\000\004\062\135\001\002\000\016\007\uffb2\015\uffb2" +
    "\017\uffb2\043\uffb2\064\uffb2\065\uffb2\001\002\000\016\007" +
    "\uffb3\015\uffb3\017\uffb3\043\uffb3\064\uffb3\065\uffb3\001\002" +
    "\000\062\004\uff53\005\uff53\007\uff53\010\uff53\013\uff53\015" +
    "\uff53\017\uff53\026\uff53\035\uff53\036\uff53\042\uff53\045\uff53" +
    "\046\uff53\047\uff53\050\uff53\051\uff53\054\uff53\055\uff53\056" +
    "\uff53\062\uff53\064\uff53\065\uff53\067\uff53\070\uff53\001\002" +
    "\000\062\004\uff54\005\uff54\007\uff54\010\uff54\013\uff54\015" +
    "\uff54\017\uff54\026\uff54\035\uff54\036\uff54\042\uff54\045\uff54" +
    "\046\uff54\047\uff54\050\uff54\051\uff54\054\uff54\055\uff54\056" +
    "\uff54\062\uff54\064\uff54\065\uff54\067\uff54\070\uff54\001\002" +
    "\000\046\004\071\016\100\031\064\044\073\047\065\052" +
    "\061\053\101\056\076\057\063\060\074\066\067\070\102" +
    "\073\060\075\052\102\077\103\062\104\044\106\070\001" +
    "\002\000\056\004\uff65\005\uff65\010\uff65\013\uff65\017\uff65" +
    "\026\uff65\035\uff65\036\uff65\042\uff65\045\uff65\046\uff65\047" +
    "\uff65\050\uff65\051\uff65\054\uff65\055\uff65\056\uff65\062\uff65" +
    "\064\uff65\065\uff65\067\uff65\070\uff65\001\002\000\022\005" +
    "\144\017\uff76\042\uff76\054\uff76\055\uff76\062\uff76\064\uff76" +
    "\065\uff76\001\002\000\046\004\071\016\100\031\064\044" +
    "\073\047\065\052\061\053\101\056\076\057\063\060\074" +
    "\066\067\070\102\073\060\075\052\102\077\103\062\104" +
    "\044\106\070\001\002\000\024\005\uff74\010\146\017\uff74" +
    "\042\uff74\054\uff74\055\uff74\062\uff74\064\uff74\065\uff74\001" +
    "\002\000\046\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\026\005\uff72\010\uff72\013\150\017\uff72\042" +
    "\uff72\054\uff72\055\uff72\062\uff72\064\uff72\065\uff72\001\002" +
    "\000\046\004\071\016\100\031\064\044\073\047\065\052" +
    "\061\053\101\056\076\057\063\060\074\066\067\070\102" +
    "\073\060\075\052\102\077\103\062\104\044\106\070\001" +
    "\002\000\030\004\152\005\uff70\010\uff70\013\uff70\017\uff70" +
    "\042\uff70\054\uff70\055\uff70\062\uff70\064\uff70\065\uff70\001" +
    "\002\000\046\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\034\004\uff6e\005\uff6e\010\uff6e\013\uff6e\017" +
    "\uff6e\026\156\042\uff6e\051\155\054\uff6e\055\uff6e\062\uff6e" +
    "\064\uff6e\065\uff6e\001\002\000\046\004\071\016\100\031" +
    "\064\044\073\047\065\052\061\053\101\056\076\057\063" +
    "\060\074\066\067\070\102\073\060\075\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\046\004\uff63\016\uff63" +
    "\031\uff63\044\uff63\047\uff63\052\uff63\053\uff63\056\uff63\057" +
    "\uff63\060\uff63\066\uff63\070\uff63\073\uff63\075\uff63\102\uff63" +
    "\103\uff63\104\uff63\106\uff63\001\002\000\046\004\uff64\016" +
    "\uff64\031\uff64\044\uff64\047\uff64\052\uff64\053\uff64\056\uff64" +
    "\057\uff64\060\uff64\066\uff64\070\uff64\073\uff64\075\uff64\102" +
    "\uff64\103\uff64\104\uff64\106\uff64\001\002\000\044\004\uff6c" +
    "\005\uff6c\010\uff6c\013\uff6c\017\uff6c\026\uff6c\035\164\036" +
    "\160\042\uff6c\045\163\046\161\051\uff6c\054\uff6c\055\uff6c" +
    "\062\uff6c\064\uff6c\065\uff6c\001\002\000\046\004\uff5f\016" +
    "\uff5f\031\uff5f\044\uff5f\047\uff5f\052\uff5f\053\uff5f\056\uff5f" +
    "\057\uff5f\060\uff5f\066\uff5f\070\uff5f\073\uff5f\075\uff5f\102" +
    "\uff5f\103\uff5f\104\uff5f\106\uff5f\001\002\000\046\004\uff60" +
    "\016\uff60\031\uff60\044\uff60\047\uff60\052\uff60\053\uff60\056" +
    "\uff60\057\uff60\060\uff60\066\uff60\070\uff60\073\uff60\075\uff60" +
    "\102\uff60\103\uff60\104\uff60\106\uff60\001\002\000\046\004" +
    "\071\016\100\031\064\044\073\047\065\052\061\053\101" +
    "\056\076\057\063\060\074\066\067\070\102\073\060\075" +
    "\052\102\077\103\062\104\044\106\070\001\002\000\046" +
    "\004\uff62\016\uff62\031\uff62\044\uff62\047\uff62\052\uff62\053" +
    "\uff62\056\uff62\057\uff62\060\uff62\066\uff62\070\uff62\073\uff62" +
    "\075\uff62\102\uff62\103\uff62\104\uff62\106\uff62\001\002\000" +
    "\046\004\uff61\016\uff61\031\uff61\044\uff61\047\uff61\052\uff61" +
    "\053\uff61\056\uff61\057\uff61\060\uff61\066\uff61\070\uff61\073" +
    "\uff61\075\uff61\102\uff61\103\uff61\104\uff61\106\uff61\001\002" +
    "\000\050\004\uff6a\005\uff6a\010\uff6a\013\uff6a\017\uff6a\026" +
    "\uff6a\035\uff6a\036\uff6a\042\uff6a\045\uff6a\046\uff6a\047\167" +
    "\051\uff6a\054\uff6a\055\uff6a\056\166\062\uff6a\064\uff6a\065" +
    "\uff6a\001\002\000\046\004\uff5e\016\uff5e\031\uff5e\044\uff5e" +
    "\047\uff5e\052\uff5e\053\uff5e\056\uff5e\057\uff5e\060\uff5e\066" +
    "\uff5e\070\uff5e\073\uff5e\075\uff5e\102\uff5e\103\uff5e\104\uff5e" +
    "\106\uff5e\001\002\000\046\004\uff5d\016\uff5d\031\uff5d\044" +
    "\uff5d\047\uff5d\052\uff5d\053\uff5d\056\uff5d\057\uff5d\060\uff5d" +
    "\066\uff5d\070\uff5d\073\uff5d\075\uff5d\102\uff5d\103\uff5d\104" +
    "\uff5d\106\uff5d\001\002\000\046\004\071\016\100\031\064" +
    "\044\073\047\065\052\061\053\101\056\076\057\063\060" +
    "\074\066\067\070\102\073\060\075\052\102\077\103\062" +
    "\104\044\106\070\001\002\000\056\004\uff68\005\uff68\010" +
    "\uff68\013\uff68\017\uff68\026\uff68\035\uff68\036\uff68\042\uff68" +
    "\045\uff68\046\uff68\047\uff68\050\172\051\uff68\054\uff68\055" +
    "\uff68\056\uff68\062\uff68\064\uff68\065\uff68\067\174\070\173" +
    "\001\002\000\046\004\uff5a\016\uff5a\031\uff5a\044\uff5a\047" +
    "\uff5a\052\uff5a\053\uff5a\056\uff5a\057\uff5a\060\uff5a\066\uff5a" +
    "\070\uff5a\073\uff5a\075\uff5a\102\uff5a\103\uff5a\104\uff5a\106" +
    "\uff5a\001\002\000\046\004\uff5c\016\uff5c\031\uff5c\044\uff5c" +
    "\047\uff5c\052\uff5c\053\uff5c\056\uff5c\057\uff5c\060\uff5c\066" +
    "\uff5c\070\uff5c\073\uff5c\075\uff5c\102\uff5c\103\uff5c\104\uff5c" +
    "\106\uff5c\001\002\000\046\004\uff5b\016\uff5b\031\uff5b\044" +
    "\uff5b\047\uff5b\052\uff5b\053\uff5b\056\uff5b\057\uff5b\060\uff5b" +
    "\066\uff5b\070\uff5b\073\uff5b\075\uff5b\102\uff5b\103\uff5b\104" +
    "\uff5b\106\uff5b\001\002\000\046\004\071\016\100\031\064" +
    "\044\073\047\065\052\061\053\101\056\076\057\063\060" +
    "\074\066\067\070\102\073\060\075\052\102\077\103\062" +
    "\104\044\106\070\001\002\000\056\004\uff66\005\uff66\010" +
    "\uff66\013\uff66\017\uff66\026\uff66\035\uff66\036\uff66\042\uff66" +
    "\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\054\uff66\055" +
    "\uff66\056\uff66\062\uff66\064\uff66\065\uff66\067\uff66\070\uff66" +
    "\001\002\000\004\065\200\001\002\000\124\002\uffed\004" +
    "\uffed\011\uffed\012\uffed\014\uffed\016\uffed\020\uffed\021\uffed" +
    "\022\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\037\uffed\040\uffed\042\uffed\044\uffed\047\uffed\052\uffed" +
    "\053\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\066" +
    "\uffed\070\uffed\071\uffed\072\uffed\073\uffed\075\uffed\076\uffed" +
    "\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\001\002\000\046\004\071\016\100\031\064\044\073" +
    "\047\065\052\061\053\101\056\076\057\063\060\074\066" +
    "\067\070\102\073\060\075\052\102\077\103\062\104\044" +
    "\106\070\001\002\000\050\004\071\016\100\031\064\044" +
    "\073\047\065\052\061\053\101\056\076\057\063\060\074" +
    "\064\uff7b\066\067\070\102\073\060\075\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\076\004\uff4b\005\uff4b" +
    "\006\uff4b\007\uff4b\010\uff4b\013\uff4b\015\uff4b\017\uff4b\023" +
    "\uff4b\026\uff4b\035\uff4b\036\uff4b\042\uff4b\043\uff4b\044\uff4b" +
    "\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\054\uff4b\055" +
    "\uff4b\056\uff4b\057\uff4b\060\uff4b\062\uff4b\064\uff4b\065\uff4b" +
    "\067\uff4b\070\uff4b\001\002\000\004\106\207\001\002\000" +
    "\004\106\206\001\002\000\076\004\uff4c\005\uff4c\006\uff4c" +
    "\007\uff4c\010\uff4c\013\uff4c\015\uff4c\017\uff4c\023\uff4c\026" +
    "\uff4c\035\uff4c\036\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c" +
    "\046\uff4c\047\uff4c\050\uff4c\051\uff4c\054\uff4c\055\uff4c\056" +
    "\uff4c\057\uff4c\060\uff4c\062\uff4c\064\uff4c\065\uff4c\067\uff4c" +
    "\070\uff4c\001\002\000\076\004\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\013\uff4e\015\uff4e\017\uff4e\023\uff4e\026\uff4e" +
    "\035\uff4e\036\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\051\uff4e\054\uff4e\055\uff4e\056\uff4e" +
    "\057\uff4e\060\uff4e\062\uff4e\064\uff4e\065\uff4e\067\uff4e\070" +
    "\uff4e\001\002\000\006\017\uff7a\064\uff7a\001\002\000\006" +
    "\017\214\064\uff7c\001\002\000\004\064\213\001\002\000" +
    "\076\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\013\uff4a" +
    "\015\uff4a\017\uff4a\023\uff4a\026\uff4a\035\uff4a\036\uff4a\042" +
    "\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a" +
    "\051\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\062" +
    "\uff4a\064\uff4a\065\uff4a\067\uff4a\070\uff4a\001\002\000\046" +
    "\004\071\016\100\031\064\044\073\047\065\052\061\053" +
    "\101\056\076\057\063\060\074\066\067\070\102\073\060" +
    "\075\052\102\077\103\062\104\044\106\070\001\002\000" +
    "\006\017\uff79\064\uff79\001\002\000\004\062\217\001\002" +
    "\000\076\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\013" +
    "\uff4d\015\uff4d\017\uff4d\023\uff4d\026\uff4d\035\uff4d\036\uff4d" +
    "\042\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050" +
    "\uff4d\051\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d" +
    "\062\uff4d\064\uff4d\065\uff4d\067\uff4d\070\uff4d\001\002\000" +
    "\046\004\071\016\100\031\064\044\073\047\065\052\061" +
    "\053\101\056\076\057\063\060\074\066\067\070\102\073" +
    "\060\075\052\102\077\103\062\104\044\106\070\001\002" +
    "\000\016\017\uff78\042\uff78\055\uff78\062\uff78\064\uff78\065" +
    "\uff78\001\002\000\010\015\uffb5\043\130\065\uffb5\001\002" +
    "\000\006\015\224\065\uff91\001\002\000\004\044\231\001" +
    "\002\000\004\065\uff92\001\002\000\004\065\ufff0\001\002" +
    "\000\004\065\230\001\002\000\124\002\uffef\004\uffef\011" +
    "\uffef\012\uffef\014\uffef\016\uffef\020\uffef\021\uffef\022\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\037" +
    "\uffef\040\uffef\042\uffef\044\uffef\047\uffef\052\uffef\053\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef\066\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\075\uffef\076\uffef\100\uffef" +
    "\101\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\001" +
    "\002\000\050\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\064\uff7b\066" +
    "\067\070\102\073\060\075\052\102\077\103\062\104\044" +
    "\106\070\001\002\000\004\064\233\001\002\000\004\065" +
    "\uff90\001\002\000\012\004\uffc2\043\uffc2\064\uffc2\106\uffc2" +
    "\001\002\000\014\004\uffbb\043\uffbb\064\uffbb\070\114\106" +
    "\uffbb\001\002\000\010\007\uffb5\043\130\065\uffb5\001\002" +
    "\000\006\007\241\065\uff93\001\002\000\004\065\ufff2\001" +
    "\002\000\046\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\004\065\uff94\001\002\000\004\065\244\001" +
    "\002\000\124\002\ufff1\004\ufff1\011\ufff1\012\ufff1\014\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\040\ufff1\042\ufff1" +
    "\044\ufff1\047\ufff1\052\ufff1\053\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\063\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\075\ufff1\076\ufff1\100\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\106\ufff1\001\002\000\004\042\246" +
    "\001\002\000\012\011\uffea\032\uffea\040\uffea\105\uffea\001" +
    "\002\000\012\011\032\032\034\040\035\105\030\001\002" +
    "\000\020\011\032\032\034\034\uffe0\040\035\061\uffe0\074" +
    "\257\105\261\001\002\000\004\106\253\001\002\000\020" +
    "\011\uffe4\032\uffe4\034\uffe4\040\uffe4\061\uffe4\074\uffe4\105" +
    "\uffe4\001\002\000\006\043\130\065\uffb5\001\002\000\004" +
    "\065\255\001\002\000\020\011\uffe2\032\uffe2\034\uffe2\040" +
    "\uffe2\061\uffe2\074\uffe2\105\uffe2\001\002\000\012\034\uffdc" +
    "\061\uffdc\074\uffdc\105\uffdc\001\002\000\004\105\u012f\001" +
    "\002\000\020\011\uffe3\032\uffe3\034\uffe3\040\uffe3\061\uffe3" +
    "\074\uffe3\105\uffe3\001\002\000\006\044\uffdb\070\uffbe\001" +
    "\002\000\012\034\uffe1\061\uffe1\074\257\105\u0125\001\002" +
    "\000\012\034\uffdf\061\uffdf\074\uffdf\105\uffdf\001\002\000" +
    "\012\034\uffdd\061\uffdd\074\uffdd\105\uffdd\001\002\000\006" +
    "\034\uffe9\061\uffe9\001\002\000\006\034\270\061\uffd5\001" +
    "\002\000\006\034\uffd4\061\uffd4\001\002\000\004\015\300" +
    "\001\002\000\006\034\270\061\uffd6\001\002\000\006\034" +
    "\uffd2\061\uffd2\001\002\000\004\061\uffe8\001\002\000\004" +
    "\061\275\001\002\000\004\065\276\001\002\000\026\002" +
    "\uffe7\011\uffe7\020\uffe7\030\uffe7\032\uffe7\034\uffe7\040\uffe7" +
    "\071\uffe7\072\uffe7\105\uffe7\001\002\000\006\034\uffd3\061" +
    "\uffd3\001\002\000\014\011\032\032\034\040\035\077\303" +
    "\105\030\001\002\000\006\004\uffbd\106\uffbd\001\002\000" +
    "\006\004\304\106\uff95\001\002\000\006\004\uffbc\106\uffbc" +
    "\001\002\000\004\106\uff96\001\002\000\004\106\306\001" +
    "\002\000\004\044\uffd1\001\002\000\004\044\310\001\002" +
    "\000\014\011\032\032\034\040\035\064\uff9a\105\030\001" +
    "\002\000\006\004\304\106\uff95\001\002\000\006\017\u0120" +
    "\064\uff9b\001\002\000\006\017\uff99\064\uff99\001\002\000" +
    "\004\064\315\001\002\000\004\042\uffd0\001\002\000\004" +
    "\042\317\001\002\000\114\004\071\011\uffeb\012\347\014" +
    "\337\016\100\020\uffeb\021\325\022\323\027\343\031\064" +
    "\032\uffeb\033\351\037\354\040\uffeb\042\332\044\073\047" +
    "\065\052\061\053\101\056\076\057\063\060\074\061\uffad" +
    "\063\327\066\067\070\102\071\015\073\060\075\052\076" +
    "\322\100\333\101\324\102\077\103\062\104\044\105\uffeb" +
    "\106\070\001\002\000\114\004\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\016\uffa1\020\uffa1\021\uffa1\022\uffa1\027\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\037\uffa1\040\uffa1\042\uffa1\044\uffa1\047" +
    "\uffa1\052\uffa1\053\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\063\uffa1\066\uffa1\070\uffa1\071\uffa1\073\uffa1\075\uffa1\076" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1" +
    "\106\uffa1\001\002\000\114\004\uffa0\011\uffa0\012\uffa0\014" +
    "\uffa0\016\uffa0\020\uffa0\021\uffa0\022\uffa0\027\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\037\uffa0\040\uffa0\042\uffa0\044\uffa0\047" +
    "\uffa0\052\uffa0\053\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\063\uffa0\066\uffa0\070\uffa0\071\uffa0\073\uffa0\075\uffa0\076" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0" +
    "\106\uffa0\001\002\000\046\004\071\016\100\031\064\044" +
    "\073\047\065\052\061\053\101\056\076\057\063\060\074" +
    "\066\067\070\102\073\060\075\052\102\077\103\062\104" +
    "\044\106\070\001\002\000\004\055\u0115\001\002\000\046" +
    "\004\071\016\100\031\064\044\073\047\065\052\061\053" +
    "\101\056\076\057\063\060\074\066\067\070\102\073\060" +
    "\075\052\102\077\103\062\104\044\106\070\001\002\000" +
    "\004\065\u0112\001\002\000\114\004\uff9f\011\uff9f\012\uff9f" +
    "\014\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f\027\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\037\uff9f\040\uff9f\042\uff9f\044\uff9f" +
    "\047\uff9f\052\uff9f\053\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\063\uff9f\066\uff9f\070\uff9f\071\uff9f\073\uff9f\075\uff9f" +
    "\076\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105" +
    "\uff9f\106\uff9f\001\002\000\050\004\071\016\100\031\064" +
    "\044\073\047\065\052\061\053\101\056\076\057\063\060" +
    "\074\065\u0110\066\067\070\102\073\060\075\052\102\077" +
    "\103\062\104\044\106\070\001\002\000\114\004\uff9e\011" +
    "\uff9e\012\uff9e\014\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\027\uff9e\031\uff9e\032\uff9e\033\uff9e\037\uff9e\040\uff9e\042" +
    "\uff9e\044\uff9e\047\uff9e\052\uff9e\053\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\063\uff9e\066\uff9e\070\uff9e\071\uff9e\073" +
    "\uff9e\075\uff9e\076\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e" +
    "\104\uff9e\105\uff9e\106\uff9e\001\002\000\114\004\uffa5\011" +
    "\uffa5\012\uffa5\014\uffa5\016\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\027\uffa5\031\uffa5\032\uffa5\033\uffa5\037\uffa5\040\uffa5\042" +
    "\uffa5\044\uffa5\047\uffa5\052\uffa5\053\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\063\uffa5\066\uffa5\070\uffa5\071\uffa5\073" +
    "\uffa5\075\uffa5\076\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5" +
    "\104\uffa5\105\uffa5\106\uffa5\001\002\000\114\004\uffb1\011" +
    "\uffb1\012\uffb1\014\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\027\uffb1\031\uffb1\032\uffb1\033\uffb1\037\uffb1\040\uffb1\042" +
    "\uffb1\044\uffb1\047\uffb1\052\uffb1\053\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\063\uffb1\066\uffb1\070\uffb1\071\uffb1\073" +
    "\uffb1\075\uffb1\076\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\001\002\000\046\004\071\016" +
    "\100\031\064\044\073\047\065\052\061\053\101\056\076" +
    "\057\063\060\074\066\067\070\102\073\060\075\052\102" +
    "\077\103\062\104\044\106\070\001\002\000\114\004\071" +
    "\011\uffeb\012\347\014\337\016\100\020\uffeb\021\325\022" +
    "\323\027\343\031\064\032\uffeb\033\351\037\354\040\uffeb" +
    "\042\332\044\073\047\065\052\061\053\101\056\076\057" +
    "\063\060\074\061\uffae\063\327\066\067\070\102\071\015" +
    "\073\060\075\052\076\322\100\333\101\324\102\077\103" +
    "\062\104\044\105\uffeb\106\070\001\002\000\114\004\uff9d" +
    "\011\uff9d\012\uff9d\014\uff9d\016\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\027\uff9d\031\uff9d\032\uff9d\033\uff9d\037\uff9d\040\uff9d" +
    "\042\uff9d\044\uff9d\047\uff9d\052\uff9d\053\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\063\uff9d\066\uff9d\070\uff9d\071\uff9d" +
    "\073\uff9d\075\uff9d\076\uff9d\100\uff9d\101\uff9d\102\uff9d\103" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\001\002\000\114\004\uffa8" +
    "\011\uffa8\012\uffa8\014\uffa8\016\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\037\uffa8\040\uffa8" +
    "\042\uffa8\044\uffa8\047\uffa8\052\uffa8\053\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\063\uffa8\066\uffa8\070\uffa8\071\uffa8" +
    "\073\uffa8\075\uffa8\076\uffa8\100\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\001\002\000\004\041\u0104" +
    "\001\002\000\114\004\uffa6\011\uffa6\012\uffa6\014\uffa6\016" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\037\uffa6\040\uffa6\042\uffa6\044\uffa6\047\uffa6\052" +
    "\uffa6\053\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6" +
    "\066\uffa6\070\uffa6\071\uffa6\073\uffa6\075\uffa6\076\uffa6\100" +
    "\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6" +
    "\001\002\000\004\065\u0103\001\002\000\004\061\uffcf\001" +
    "\002\000\004\044\375\001\002\000\114\004\uffa4\011\uffa4" +
    "\012\uffa4\014\uffa4\016\uffa4\020\uffa4\021\uffa4\022\uffa4\027" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\037\uffa4\040\uffa4\042\uffa4" +
    "\044\uffa4\047\uffa4\052\uffa4\053\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\063\uffa4\066\uffa4\070\uffa4\071\uffa4\073\uffa4" +
    "\075\uffa4\076\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104" +
    "\uffa4\105\uffa4\106\uffa4\001\002\000\114\004\uffaa\011\uffaa" +
    "\012\uffaa\014\uffaa\016\uffaa\020\uffaa\021\uffaa\022\uffaa\027" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\037\uffaa\040\uffaa\042\uffaa" +
    "\044\uffaa\047\uffaa\052\uffaa\053\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\063\uffaa\066\uffaa\070\uffaa\071\uffaa\073\uffaa" +
    "\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\001\002\000\114\004\uffac\011\uffac" +
    "\012\uffac\014\uffac\016\uffac\020\uffac\021\uffac\022\uffac\027" +
    "\uffac\031\uffac\032\uffac\033\uffac\037\uffac\040\uffac\042\uffac" +
    "\044\uffac\047\uffac\052\uffac\053\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\063\uffac\066\uffac\070\uffac\071\uffac\073\uffac" +
    "\075\uffac\076\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104" +
    "\uffac\105\uffac\106\uffac\001\002\000\004\065\374\001\002" +
    "\000\114\004\uffa9\011\uffa9\012\uffa9\014\uffa9\016\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\037\uffa9\040\uffa9\042\uffa9\044\uffa9\047\uffa9\052\uffa9\053" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\066\uffa9" +
    "\070\uffa9\071\uffa9\073\uffa9\075\uffa9\076\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\001\002" +
    "\000\004\044\363\001\002\000\114\004\uffa2\011\uffa2\012" +
    "\uffa2\014\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2\027\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\037\uffa2\040\uffa2\042\uffa2\044" +
    "\uffa2\047\uffa2\052\uffa2\053\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\063\uffa2\066\uffa2\070\uffa2\071\uffa2\073\uffa2\075" +
    "\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2" +
    "\105\uffa2\106\uffa2\001\002\000\114\004\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c\027\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\037\uff9c\040\uff9c\042\uff9c\044" +
    "\uff9c\047\uff9c\052\uff9c\053\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\066\uff9c\070\uff9c\071\uff9c\073\uff9c\075" +
    "\uff9c\076\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\001\002\000\046\004\071\016\100\031" +
    "\064\044\073\047\065\052\061\053\101\056\076\057\063" +
    "\060\074\066\067\070\102\073\060\075\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\114\004\uffa3\011\uffa3" +
    "\012\uffa3\014\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\027" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\037\uffa3\040\uffa3\042\uffa3" +
    "\044\uffa3\047\uffa3\052\uffa3\053\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\063\uffa3\066\uffa3\070\uffa3\071\uffa3\073\uffa3" +
    "\075\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\001\002\000\004\042\332\001\002" +
    "\000\116\004\uff8d\011\uff8d\012\uff8d\014\uff8d\016\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\024\361\027\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\037\uff8d\040\uff8d\042\uff8d\044\uff8d\047\uff8d\052" +
    "\uff8d\053\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d" +
    "\066\uff8d\070\uff8d\071\uff8d\073\uff8d\075\uff8d\076\uff8d\100" +
    "\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\001\002\000\114\004\uff8f\011\uff8f\012\uff8f\014\uff8f\016" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\027\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\037\uff8f\040\uff8f\042\uff8f\044\uff8f\047\uff8f\052" +
    "\uff8f\053\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f" +
    "\066\uff8f\070\uff8f\071\uff8f\073\uff8f\075\uff8f\076\uff8f\100" +
    "\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f" +
    "\001\002\000\004\042\332\001\002\000\114\004\uff8e\011" +
    "\uff8e\012\uff8e\014\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\027\uff8e\031\uff8e\032\uff8e\033\uff8e\037\uff8e\040\uff8e\042" +
    "\uff8e\044\uff8e\047\uff8e\052\uff8e\053\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\063\uff8e\066\uff8e\070\uff8e\071\uff8e\073" +
    "\uff8e\075\uff8e\076\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e" +
    "\104\uff8e\105\uff8e\106\uff8e\001\002\000\012\011\032\032" +
    "\034\040\035\105\030\001\002\000\006\004\304\106\uff95" +
    "\001\002\000\004\106\366\001\002\000\004\015\367\001" +
    "\002\000\046\004\071\016\100\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\004\064\371\001\002\000\004\042\uff8a\001" +
    "\002\000\004\042\332\001\002\000\114\004\uff89\011\uff89" +
    "\012\uff89\014\uff89\016\uff89\020\uff89\021\uff89\022\uff89\027" +
    "\uff89\031\uff89\032\uff89\033\uff89\037\uff89\040\uff89\042\uff89" +
    "\044\uff89\047\uff89\052\uff89\053\uff89\056\uff89\057\uff89\060" +
    "\uff89\061\uff89\063\uff89\066\uff89\070\uff89\071\uff89\073\uff89" +
    "\075\uff89\076\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\uff89\106\uff89\001\002\000\114\004\uff88\011\uff88" +
    "\012\uff88\014\uff88\016\uff88\020\uff88\021\uff88\022\uff88\027" +
    "\uff88\031\uff88\032\uff88\033\uff88\037\uff88\040\uff88\042\uff88" +
    "\044\uff88\047\uff88\052\uff88\053\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\063\uff88\066\uff88\070\uff88\071\uff88\073\uff88" +
    "\075\uff88\076\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\106\uff88\001\002\000\046\004\071\016\100" +
    "\031\064\044\073\047\065\052\061\053\101\056\076\057" +
    "\063\060\074\066\067\070\102\073\060\075\052\102\077" +
    "\103\062\104\044\106\070\001\002\000\004\064\377\001" +
    "\002\000\004\065\u0100\001\002\000\114\004\uff86\011\uff86" +
    "\012\uff86\014\uff86\016\uff86\020\uff86\021\uff86\022\uff86\027" +
    "\uff86\031\uff86\032\uff86\033\uff86\037\uff86\040\uff86\042\uff86" +
    "\044\uff86\047\uff86\052\uff86\053\uff86\056\uff86\057\uff86\060" +
    "\uff86\061\uff86\063\uff86\066\uff86\070\uff86\071\uff86\073\uff86" +
    "\075\uff86\076\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104" +
    "\uff86\105\uff86\106\uff86\001\002\000\004\061\u0102\001\002" +
    "\000\006\034\uffce\061\uffce\001\002\000\114\004\uffa7\011" +
    "\uffa7\012\uffa7\014\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\027\uffa7\031\uffa7\032\uffa7\033\uffa7\037\uffa7\040\uffa7\042" +
    "\uffa7\044\uffa7\047\uffa7\052\uffa7\053\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\063\uffa7\066\uffa7\070\uffa7\071\uffa7\073" +
    "\uffa7\075\uffa7\076\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\106\uffa7\001\002\000\046\004\071\016" +
    "\100\031\064\044\073\047\065\052\061\053\101\056\076" +
    "\057\063\060\074\066\067\070\102\073\060\075\052\102" +
    "\077\103\062\104\044\106\070\001\002\000\004\065\u0106" +
    "\001\002\000\114\004\uff83\011\uff83\012\uff83\014\uff83\016" +
    "\uff83\020\uff83\021\uff83\022\uff83\027\uff83\031\uff83\032\uff83" +
    "\033\uff83\037\uff83\040\uff83\042\uff83\044\uff83\047\uff83\052" +
    "\uff83\053\uff83\056\uff83\057\uff83\060\uff83\061\uff83\063\uff83" +
    "\066\uff83\070\uff83\071\uff83\073\uff83\075\uff83\076\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83" +
    "\001\002\000\114\004\uffab\011\uffab\012\uffab\014\uffab\016" +
    "\uffab\020\uffab\021\uffab\022\uffab\027\uffab\031\uffab\032\uffab" +
    "\033\uffab\037\uffab\040\uffab\042\uffab\044\uffab\047\uffab\052" +
    "\uffab\053\uffab\056\uffab\057\uffab\060\uffab\061\uffab\063\uffab" +
    "\066\uffab\070\uffab\071\uffab\073\uffab\075\uffab\076\uffab\100" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab" +
    "\001\002\000\006\015\224\065\uff91\001\002\000\004\065" +
    "\u010a\001\002\000\114\004\uff3e\011\uff3e\012\uff3e\014\uff3e" +
    "\016\uff3e\020\uff3e\021\uff3e\022\uff3e\027\uff3e\031\uff3e\032" +
    "\uff3e\033\uff3e\037\uff3e\040\uff3e\042\uff3e\044\uff3e\047\uff3e" +
    "\052\uff3e\053\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\063" +
    "\uff3e\066\uff3e\070\uff3e\071\uff3e\073\uff3e\075\uff3e\076\uff3e" +
    "\100\uff3e\101\uff3e\102\uff3e\103\uff3e\104\uff3e\105\uff3e\106" +
    "\uff3e\001\002\000\114\004\071\011\uffeb\012\347\014\337" +
    "\016\100\020\uffeb\021\325\022\323\027\343\031\064\032" +
    "\uffeb\033\351\037\354\040\uffeb\042\332\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\061\uffad\063" +
    "\327\066\067\070\102\071\015\073\060\075\052\076\322" +
    "\100\333\101\324\102\077\103\062\104\044\105\uffeb\106" +
    "\070\001\002\000\004\061\uffb0\001\002\000\004\061\u010e" +
    "\001\002\000\116\004\uffaf\011\uffaf\012\uffaf\014\uffaf\016" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\027\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\037\uffaf\040\uffaf\042\uffaf\044\uffaf\047" +
    "\uffaf\052\uffaf\053\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\063\uffaf\066\uffaf\070\uffaf\071\uffaf\073\uffaf\075\uffaf\076" +
    "\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
    "\106\uffaf\001\002\000\004\065\u0111\001\002\000\114\004" +
    "\uff85\011\uff85\012\uff85\014\uff85\016\uff85\020\uff85\021\uff85" +
    "\022\uff85\027\uff85\031\uff85\032\uff85\033\uff85\037\uff85\040" +
    "\uff85\042\uff85\044\uff85\047\uff85\052\uff85\053\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\063\uff85\066\uff85\070\uff85\071" +
    "\uff85\073\uff85\075\uff85\076\uff85\100\uff85\101\uff85\102\uff85" +
    "\103\uff85\104\uff85\105\uff85\106\uff85\001\002\000\114\004" +
    "\uff84\011\uff84\012\uff84\014\uff84\016\uff84\020\uff84\021\uff84" +
    "\022\uff84\027\uff84\031\uff84\032\uff84\033\uff84\037\uff84\040" +
    "\uff84\042\uff84\044\uff84\047\uff84\052\uff84\053\uff84\056\uff84" +
    "\057\uff84\060\uff84\061\uff84\063\uff84\066\uff84\070\uff84\071" +
    "\uff84\073\uff84\075\uff84\076\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\104\uff84\105\uff84\106\uff84\001\002\000\114\004" +
    "\uff87\011\uff87\012\uff87\014\uff87\016\uff87\020\uff87\021\uff87" +
    "\022\uff87\027\uff87\031\uff87\032\uff87\033\uff87\037\uff87\040" +
    "\uff87\042\uff87\044\uff87\047\uff87\052\uff87\053\uff87\056\uff87" +
    "\057\uff87\060\uff87\061\uff87\063\uff87\066\uff87\070\uff87\071" +
    "\uff87\073\uff87\075\uff87\076\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\104\uff87\105\uff87\106\uff87\001\002\000\004\065" +
    "\u0114\001\002\000\114\004\uff3d\011\uff3d\012\uff3d\014\uff3d" +
    "\016\uff3d\020\uff3d\021\uff3d\022\uff3d\027\uff3d\031\uff3d\032" +
    "\uff3d\033\uff3d\037\uff3d\040\uff3d\042\uff3d\044\uff3d\047\uff3d" +
    "\052\uff3d\053\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\063" +
    "\uff3d\066\uff3d\070\uff3d\071\uff3d\073\uff3d\075\uff3d\076\uff3d" +
    "\100\uff3d\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d\106" +
    "\uff3d\001\002\000\050\004\071\016\100\025\u0118\031\064" +
    "\044\073\047\065\052\061\053\101\056\076\057\063\060" +
    "\074\066\067\070\102\073\060\075\052\102\077\103\062" +
    "\104\044\106\070\001\002\000\006\055\u011a\065\u011b\001" +
    "\002\000\006\055\uff81\065\uff81\001\002\000\006\055\uff7e" +
    "\065\uff7e\001\002\000\006\055\uff7f\065\uff7f\001\002\000" +
    "\050\004\071\016\100\025\u0118\031\064\044\073\047\065" +
    "\052\061\053\101\056\076\057\063\060\074\066\067\070" +
    "\102\073\060\075\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\114\004\uff82\011\uff82\012\uff82\014\uff82\016" +
    "\uff82\020\uff82\021\uff82\022\uff82\027\uff82\031\uff82\032\uff82" +
    "\033\uff82\037\uff82\040\uff82\042\uff82\044\uff82\047\uff82\052" +
    "\uff82\053\uff82\056\uff82\057\uff82\060\uff82\061\uff82\063\uff82" +
    "\066\uff82\070\uff82\071\uff82\073\uff82\075\uff82\076\uff82\100" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82" +
    "\001\002\000\006\055\uff80\065\uff80\001\002\000\004\042" +
    "\uff8c\001\002\000\004\042\332\001\002\000\114\004\uff8b" +
    "\011\uff8b\012\uff8b\014\uff8b\016\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\027\uff8b\031\uff8b\032\uff8b\033\uff8b\037\uff8b\040\uff8b" +
    "\042\uff8b\044\uff8b\047\uff8b\052\uff8b\053\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\063\uff8b\066\uff8b\070\uff8b\071\uff8b" +
    "\073\uff8b\075\uff8b\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\001\002\000\012\011\032" +
    "\032\034\040\035\105\030\001\002\000\006\017\uff98\064" +
    "\uff98\001\002\000\004\106\u0123\001\002\000\010\017\uffb5" +
    "\043\130\064\uffb5\001\002\000\006\017\uff97\064\uff97\001" +
    "\002\000\004\044\uffdb\001\002\000\012\034\uffde\061\uffde" +
    "\074\uffde\105\uffde\001\002\000\004\044\u0128\001\002\000" +
    "\014\011\032\032\034\040\035\064\uff9a\105\030\001\002" +
    "\000\004\064\u012a\001\002\000\004\042\uffda\001\002\000" +
    "\004\042\u012c\001\002\000\114\004\071\011\uffeb\012\347" +
    "\014\337\016\100\020\uffeb\021\325\022\323\027\343\031" +
    "\064\032\uffeb\033\351\037\354\040\uffeb\042\332\044\073" +
    "\047\065\052\061\053\101\056\076\057\063\060\074\061" +
    "\uffad\063\327\066\067\070\102\071\015\073\060\075\052" +
    "\076\322\100\333\101\324\102\077\103\062\104\044\105" +
    "\uffeb\106\070\001\002\000\004\061\u012e\001\002\000\012" +
    "\034\uffd9\061\uffd9\074\uffd9\105\uffd9\001\002\000\004\044" +
    "\uffd8\001\002\000\004\044\u0131\001\002\000\004\064\u0132" +
    "\001\002\000\004\042\u0133\001\002\000\114\004\071\011" +
    "\uffeb\012\347\014\337\016\100\020\uffeb\021\325\022\323" +
    "\027\343\031\064\032\uffeb\033\351\037\354\040\uffeb\042" +
    "\332\044\073\047\065\052\061\053\101\056\076\057\063" +
    "\060\074\061\uffad\063\327\066\067\070\102\071\015\073" +
    "\060\075\052\076\322\100\333\101\324\102\077\103\062" +
    "\104\044\105\uffeb\106\070\001\002\000\004\061\u0135\001" +
    "\002\000\012\034\uffd7\061\uffd7\074\uffd7\105\uffd7\001\002" +
    "\000\014\011\032\032\034\040\035\077\303\105\030\001" +
    "\002\000\006\004\304\106\uff95\001\002\000\004\106\u0139" +
    "\001\002\000\004\044\uffcd\001\002\000\004\044\u013b\001" +
    "\002\000\014\011\032\032\034\040\035\064\uff9a\105\030" +
    "\001\002\000\004\064\u013d\001\002\000\004\042\uffcc\001" +
    "\002\000\004\042\u013f\001\002\000\114\004\071\011\uffeb" +
    "\012\347\014\337\016\100\020\uffeb\021\325\022\323\027" +
    "\343\031\064\032\uffeb\033\351\037\354\040\uffeb\042\332" +
    "\044\073\047\065\052\061\053\101\056\076\057\063\060" +
    "\074\061\uffad\063\327\066\067\070\102\071\015\073\060" +
    "\075\052\076\322\100\333\101\324\102\077\103\062\104" +
    "\044\105\uffeb\106\070\001\002\000\004\061\uffcb\001\002" +
    "\000\004\061\u0142\001\002\000\026\002\uffca\011\uffca\020" +
    "\uffca\030\uffca\032\uffca\034\uffca\040\uffca\071\uffca\072\uffca" +
    "\105\uffca\001\002\000\004\015\u0149\001\002\000\004\106" +
    "\u0145\001\002\000\006\043\130\065\uffb5\001\002\000\004" +
    "\065\ufff4\001\002\000\004\065\u0148\001\002\000\026\002" +
    "\ufff3\011\ufff3\020\ufff3\030\ufff3\032\ufff3\034\ufff3\040\ufff3" +
    "\071\ufff3\072\ufff3\105\ufff3\001\002\000\014\011\032\032" +
    "\034\040\035\077\303\105\030\001\002\000\004\106\u014b" +
    "\001\002\000\004\044\uffc9\001\002\000\004\044\u014d\001" +
    "\002\000\014\011\032\032\034\040\035\064\uff9a\105\030" +
    "\001\002\000\004\064\u014f\001\002\000\004\065\uffc8\001" +
    "\002\000\004\065\u0151\001\002\000\026\002\uffc7\011\uffc7" +
    "\020\uffc7\030\uffc7\032\uffc7\034\uffc7\040\uffc7\071\uffc7\072" +
    "\uffc7\105\uffc7\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\006\003\003\125\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\012\015\007\001\001\000" +
    "\002\001\001\000\006\077\026\100\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\026\100\024\101\030\103\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\012\015\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\104\233\105\234\106\115\001" +
    "\001\000\002\001\001\000\006\105\114\106\115\001\001" +
    "\000\002\001\001\000\004\077\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\034\074\043\071\046\052\047\065\050\056\051" +
    "\055\052\054\053\053\054\050\055\045\056\044\057\042" +
    "\060\040\061\041\062\047\063\046\001\001\000\004\042" +
    "\174\001\001\000\002\001\001\000\004\041\167\001\001" +
    "\000\002\001\001\000\004\036\161\001\001\000\004\035" +
    "\153\001\001\000\002\001\001\000\004\043\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\131\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\074\043" +
    "\071\061\137\062\047\063\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\074\043\071\061\120\062\047\063\046\001\001\000" +
    "\014\034\074\043\071\061\117\062\047\063\046\001\001" +
    "\000\050\034\074\043\071\047\107\050\056\051\055\052" +
    "\054\053\053\054\050\055\045\056\044\057\042\060\040" +
    "\061\041\062\047\063\046\077\026\100\024\101\105\103" +
    "\106\001\001\000\002\001\001\000\014\034\074\043\071" +
    "\061\104\062\047\063\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\074\043\071\061\102\062\047\063\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\114\106\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\074\043\071\061\112" +
    "\062\047\063\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\034" +
    "\074\043\071\061\122\062\047\063\046\077\026\100\024" +
    "\101\123\102\124\103\125\001\001\000\002\001\001\000" +
    "\006\105\114\106\115\001\001\000\010\066\126\067\130" +
    "\070\131\001\001\000\002\001\001\000\004\070\135\001" +
    "\001\000\042\034\074\043\071\046\133\047\065\050\056" +
    "\051\055\052\054\053\053\054\050\055\045\056\044\057" +
    "\042\060\040\061\041\062\047\063\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\034\074\043\071\051\142\052" +
    "\054\053\053\054\050\055\045\056\044\057\042\060\040" +
    "\061\141\062\047\063\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\034\074\043\071\052\144\053\053" +
    "\054\050\055\045\056\044\057\042\060\040\061\141\062" +
    "\047\063\046\001\001\000\002\001\001\000\030\034\074" +
    "\043\071\053\146\054\050\055\045\056\044\057\042\060" +
    "\040\061\141\062\047\063\046\001\001\000\002\001\001" +
    "\000\026\034\074\043\071\054\150\055\045\056\044\057" +
    "\042\060\040\061\141\062\047\063\046\001\001\000\002" +
    "\001\001\000\024\034\074\043\071\055\152\056\044\057" +
    "\042\060\040\061\141\062\047\063\046\001\001\000\004" +
    "\035\153\001\001\000\022\034\074\043\071\056\156\057" +
    "\042\060\040\061\141\062\047\063\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\034\074\043\071" +
    "\057\164\060\040\061\141\062\047\063\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\034\074\043" +
    "\071\060\170\061\141\062\047\063\046\001\001\000\004" +
    "\042\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\074\043\071\061\175\062\047" +
    "\063\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\034\074\043\071\047\215\050\056" +
    "\051\055\052\054\053\053\054\050\055\045\056\044\057" +
    "\042\060\040\061\041\062\047\063\046\001\001\000\044" +
    "\034\074\043\071\047\207\050\056\051\055\052\054\053" +
    "\053\054\050\055\045\056\044\057\042\060\040\061\041" +
    "\062\047\063\046\112\211\113\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\034\074\043\071" +
    "\047\214\050\056\051\055\052\054\053\053\054\050\055" +
    "\045\056\044\057\042\060\040\061\041\062\047\063\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\034\074\043\071\047\220\050\056\051\055" +
    "\052\054\053\053\054\050\055\045\056\044\057\042\060" +
    "\040\061\041\062\047\063\046\001\001\000\002\001\001" +
    "\000\010\066\126\067\222\070\131\001\001\000\006\115" +
    "\225\116\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\034\074\043\071\047\207\050\056\051\055" +
    "\052\054\053\053\054\050\055\045\056\044\057\042\060" +
    "\040\061\041\062\047\063\046\112\231\113\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\116\001\001\000\010\066\126\067\236\070\131" +
    "\001\001\000\004\064\237\001\001\000\004\127\242\001" +
    "\001\000\040\034\074\043\071\047\241\050\056\051\055" +
    "\052\054\053\053\054\050\055\045\056\044\057\042\060" +
    "\040\061\041\062\047\063\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\246\001\001\000\016\071\251\077\026\100\024" +
    "\101\105\103\250\124\247\001\001\000\026\071\257\072" +
    "\263\073\255\075\262\077\026\100\024\101\105\103\250" +
    "\120\264\121\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\126\067\253\070\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u0126\001\001\000\010" +
    "\072\263\073\255\075\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\265\001\001\000\012\074\271" +
    "\076\266\122\272\123\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\074\271\076\276\001\001\000\002" +
    "\001\001\000\004\134\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\077\026\100\024\101\123\102\300\103\125\107\301\001" +
    "\001\000\002\001\001\000\004\016\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\140" +
    "\306\001\001\000\002\001\001\000\022\044\312\077\026" +
    "\100\024\101\123\102\310\103\125\110\313\111\311\001" +
    "\001\000\004\016\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\315\001\001\000" +
    "\002\001\001\000\104\012\344\013\347\014\012\017\345" +
    "\020\335\021\337\023\343\024\330\025\354\026\351\027" +
    "\317\030\325\031\327\034\074\037\334\040\352\043\071" +
    "\047\340\050\056\051\055\052\054\053\053\054\050\055" +
    "\045\056\044\057\042\060\040\061\041\062\047\063\046" +
    "\065\320\114\341\117\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\034\074\043\071\047\u011c\050\056" +
    "\051\055\052\054\053\053\054\050\055\045\056\044\057" +
    "\042\060\040\061\041\062\047\063\046\001\001\000\002" +
    "\001\001\000\014\034\074\043\071\061\u0112\062\047\063" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\034\074\043\071\047\u010e\050\056\051\055\052\054\053" +
    "\053\054\050\055\045\056\044\057\042\060\040\061\041" +
    "\062\047\063\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\150\u010a\001\001\000\014\034\074\043\071" +
    "\061\u0107\062\047\063\046\001\001\000\100\012\344\013" +
    "\347\014\012\017\u0106\020\335\021\337\023\343\024\330" +
    "\025\354\026\351\027\317\030\325\031\327\034\074\037" +
    "\334\040\352\043\071\047\340\050\056\051\055\052\054" +
    "\053\053\054\050\055\045\056\044\057\042\060\040\061" +
    "\041\062\047\063\046\065\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\142\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\034\074\043\071\047" +
    "\355\050\056\051\055\052\054\053\053\054\050\055\045" +
    "\056\044\057\042\060\040\061\041\062\047\063\046\001" +
    "\001\000\002\001\001\000\004\020\356\001\001\000\004" +
    "\022\357\001\001\000\002\001\001\000\004\020\361\001" +
    "\001\000\002\001\001\000\014\077\026\100\024\101\123" +
    "\102\363\103\125\001\001\000\004\016\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\034\074\043\071" +
    "\047\367\050\056\051\055\052\054\053\053\054\050\055" +
    "\045\056\044\057\042\060\040\061\041\062\047\063\046" +
    "\001\001\000\002\001\001\000\004\153\371\001\001\000" +
    "\004\020\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\034\074\043\071\047\375\050\056\051\055\052" +
    "\054\053\053\054\050\055\045\056\044\057\042\060\040" +
    "\061\041\062\047\063\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\074\043\071\061" +
    "\u0104\062\047\063\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\115\u0108\116\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\012\344" +
    "\013\347\014\012\017\345\020\335\021\337\023\343\024" +
    "\330\025\354\026\351\027\317\030\325\031\327\034\074" +
    "\037\334\040\352\043\071\047\340\050\056\051\055\052" +
    "\054\053\053\054\050\055\045\056\044\057\042\060\040" +
    "\061\041\062\047\063\046\065\320\114\u010b\117\333\001" +
    "\001\000\004\151\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\032\u0115\033\u0116\034\074\043\071\047\u0118\050" +
    "\056\051\055\052\054\053\053\054\050\055\045\056\044" +
    "\057\042\060\040\061\041\062\047\063\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\033\u011b\034\074\043\071\047\u0118\050" +
    "\056\051\055\052\054\053\053\054\050\055\045\056\044" +
    "\057\042\060\040\061\041\062\047\063\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\152\u011d\001\001" +
    "\000\004\020\u011e\001\001\000\002\001\001\000\016\044" +
    "\u0120\077\026\100\024\101\123\102\310\103\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\066\126\067" +
    "\u0123\070\131\001\001\000\002\001\001\000\004\135\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\044" +
    "\312\077\026\100\024\101\123\102\310\103\125\110\u0128" +
    "\111\311\001\001\000\002\001\001\000\004\136\u012a\001" +
    "\001\000\002\001\001\000\104\012\344\013\347\014\012" +
    "\017\345\020\335\021\337\023\343\024\330\025\354\026" +
    "\351\027\317\030\325\031\327\034\074\037\334\040\352" +
    "\043\071\047\340\050\056\051\055\052\054\053\053\054" +
    "\050\055\045\056\044\057\042\060\040\061\041\062\047" +
    "\063\046\065\320\114\u012c\117\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\137\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\012" +
    "\344\013\347\014\012\017\345\020\335\021\337\023\343" +
    "\024\330\025\354\026\351\027\317\030\325\031\327\034" +
    "\074\037\334\040\352\043\071\047\340\050\056\051\055" +
    "\052\054\053\053\054\050\055\045\056\044\057\042\060" +
    "\040\061\041\062\047\063\046\065\320\114\u0133\117\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\077" +
    "\026\100\024\101\123\102\300\103\125\107\u0136\001\001" +
    "\000\004\016\u0137\001\001\000\002\001\001\000\004\143" +
    "\u0139\001\001\000\002\001\001\000\022\044\312\077\026" +
    "\100\024\101\123\102\310\103\125\110\u013b\111\311\001" +
    "\001\000\002\001\001\000\004\144\u013d\001\001\000\002" +
    "\001\001\000\104\012\344\013\347\014\012\017\345\020" +
    "\335\021\337\023\343\024\330\025\354\026\351\027\317" +
    "\030\325\031\327\034\074\037\334\040\352\043\071\047" +
    "\340\050\056\051\055\052\054\053\053\054\050\055\045" +
    "\056\044\057\042\060\040\061\041\062\047\063\046\065" +
    "\320\114\u013f\117\333\001\001\000\004\145\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\066\126\067\u0145\070\131\001\001" +
    "\000\004\126\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\077\026\100\024\101\123\102\300\103\125" +
    "\107\u0149\001\001\000\002\001\001\000\004\146\u014b\001" +
    "\001\000\002\001\001\000\022\044\312\077\026\100\024" +
    "\101\123\102\310\103\125\110\u014d\111\311\001\001\000" +
    "\002\001\001\000\004\147\u014f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).checkDeleteStmt(_1); 
						
					
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							
						 ((MyParser) parser).checkNewStmt(_1, _2);
						 
					
              CUP$parser$result = new java_cup.runtime.Symbol(29/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3Global_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("this", new ThisType(((MyParser) parser).GetStructName()));              // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("null",4));     // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO con = new ConstSTO ("false", new BoolType(), 0);   
                        con.isLiteral = true; 
                        RESULT = con;   // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO con = new ConstSTO ("true",new BoolType() , 1);    
                        con.isLiteral = true; 
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con;   // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO con = new ConstSTO (_1, new FloatType(), Double.parseDouble(_1));
                        con.isLiteral = true; 
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con;   // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO con = new ConstSTO (_1, new IntType(), Integer.parseInt(_1));    // fix me!
                        con.isLiteral = true;
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con; 
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1,_2);
                         //RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoPrePostIncDecExpr(_1,(UnaryOperator)_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoArrowCheck(_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (((MyParser) parser).DoBracketCheck(_1), _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
          	              RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoPrePostIncDecExpr(_2,(UnaryOperator)_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT =  ((MyParser) parser).DoTypeCast(_1, _2); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).calcSizeOfArray(_2, _1); 
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    	RESULT =  ((MyParser) parser).calcSizeOf(_2); 
                        //RESULT = new ConstSTO("sizeof variable - fix me", null, 0);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                              
                    RESULT = ((MyParser) parser).DoBinaryExpr (null, new NotOperator(), _1);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						if (((String)_1).equals("-"))
							RESULT = ((MyParser) parser).DoNegate(_2);
						else	
							RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser) parser).setPassByReference(_1);
                    	//RESULT = _1;
                   	
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						
                        RESULT = ((MyParser) parser).DoStarCheck(_1); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // IncDecOp ::= T_MINUSMINUS 
            {
              Object RESULT = null;
		
                        RESULT = new DecrementOperator();
                        ((DecrementOperator)RESULT).setName("--"); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // IncDecOp ::= T_PLUSPLUS 
            {
              Object RESULT = null;
		
                        RESULT = new IncrementOperator();
                        ((IncrementOperator) RESULT).setName("++"); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // MulOp ::= T_MOD 
            {
              Object RESULT = null;
		
                        RESULT = new ModOperator();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // MulOp ::= T_SLASH 
            {
              Object RESULT = null;
		
                        RESULT = new DivideOperator();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // MulOp ::= T_STAR 
            {
              Object RESULT = null;
		
                        RESULT = new MultiplyOperator();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AddOp ::= T_MINUS 
            {
              Object RESULT = null;
		
                        RESULT = new MinusOperator();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AddOp ::= T_PLUS 
            {
              Object RESULT = null;
		
                        RESULT = new AddOperator();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
    					RESULT = new GTEOperator();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
    					RESULT = new LTEOperator();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
    					RESULT = new GTOperator();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
						RESULT = new LTOperator();
					
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
    					RESULT = new NEQOperator();
    					((NEQOperator) RESULT).setName("!="); 
    				
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
						RESULT = new EQUOperator();
						((EQUOperator) RESULT).setName("=="); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, (Operator)_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, (Operator)_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoBinaryExpr (_1, (ComparisonOperator)_2, _3);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser) parser).DoBinaryExpr (_1, (ComparisonOperator)_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwAndOperator(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwXorOperator(), _3);
						
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwOrOperator(), _3);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOperator(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOperator(), _3);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
    					RESULT = _1; 
    					RESULT.addElement(_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(73/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(73/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OptExprList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
    					RESULT = _1; 
    				
              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(36/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WritePair ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = new ReturnSTO("return", _1);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(51/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              STO RESULT = null;
		
						RESULT = new ReturnSTO("return", null);  
					
              CUP$parser$result = new java_cup.runtime.Symbol(51/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						RESULT = new ExitSTO("exit",_1.getType());
						((MyParser) parser).DoExitStmtChecks((ExitSTO)RESULT);
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
						RESULT = new ContinueSTO("continue");
					
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
						RESULT = new BreakSTO("break");
					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$22 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    	((MyParser) parser).decrementCodeBlockCounter();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$22 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    	((MyParser) parser).incrementCodeBlockCounter();
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoVarDecl (_3, _1, null,null);
                        ((MyParser) parser).DoForEachCheck(_3,_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WhileStmt ::= T_WHILE Expr NT$21 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						((MyParser) parser).decrementCodeBlockCounter();
						//((MyParser) parser).DoBlockClose();
					
              CUP$parser$result = new java_cup.runtime.Symbol(18/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					   ((MyParser) parser).incrementCodeBlockCounter(); 
					   ((MyParser) parser).DoWhileStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IfStmt ::= T_IF Expr CodeBlock OptElse 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).DoIfStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(15/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(76/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptCtorCall ::= 
            {
              Vector RESULT = null;
		
    					RESULT = null;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = _1; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(50/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptRef ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptRef ::= T_AMPERSAND 
            {
              Object RESULT = null;
		
						RESULT = "true";
					
              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT =  ((MyParser) parser).createNewVarSTO(_1,_2,(String)_3,_4); 
						//RESULT = new VarSTO(_1, _2, (String) _3, _4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptParamList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector(); 
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					((MyParser) parser).checkCodeBlock((STO)_1); 
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					((MyParser) parser).checkCodeBlock((STO)_1); 
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
 	 	  				RESULT = _3;
 	 	  				if (_2 != null) {
    						RESULT.addElement((STO)_2);
    					}
    				
              CUP$parser$result = new java_cup.runtime.Symbol(77/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector<ReturnSTO>();
						
						if (_1 != null) {
								RESULT.addElement((STO)_1); 
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(77/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OptStmtList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector<STO>(); 
    				
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CodeBlock ::= T_LBRACE NT$19 OptStmtList NT$20 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$20 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                    ((MyParser) parser).ReadCodeBlock(_1); 
                    ((MyParser) parser).DoBlockClose();
                    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$19 ::= 
            {
              Object RESULT = null;
 
                       ((MyParser) parser).DoBlockOpen(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = new VarSTO("array",new ArrayType((STO)_1));
					
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArrayList ::= ArrayList Array 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
						ArrayType typ = (ArrayType)((VarSTO)_1).getType();
						if (typ.getArrayType() instanceof ArrayType) {
							ArrayType type2 = (ArrayType)typ.getArrayType();
							type2.setType(_2);
						}
    				
              CUP$parser$result = new java_cup.runtime.Symbol(52/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ArrayList ::= Array 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(52/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptArrayList ::= 
            {
              STO RESULT = null;
		
    					RESULT = null;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(53/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptArrayList ::= ArrayList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(53/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Pointer ::= T_STAR 
            {
              Type RESULT = null;
		
						RESULT = new PointerType("*", 4); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(68/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PointerList ::= PointerList Pointer 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					((PointerType)(RESULT)).getLastPointerType().setType(_2);
    					//_2.setName(_1.getName() + _2.getName());
    				
              CUP$parser$result = new java_cup.runtime.Symbol(67/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PointerList ::= Pointer 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(67/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OptPointerList ::= 
            {
              Type RESULT = null;
		
    					RESULT = null;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OptPointerList ::= PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(66/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new BoolType();  // gotta do something here!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new FloatType();  // gotta do something here!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new IntType();  // gotta do something here!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if (_2 != null) {
                    		PointerType typ = ((PointerType)_2).getLastPointerType();
                        	typ.setType(_1);
                        	//_1.setName(_1.getName() + _2.getName());
                        	RESULT = _2;
                        }
                        else
                        	RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if (_2 != null) {
                    		PointerType typ = ((PointerType)_2).getLastPointerType();
                    		typ.setType(_1);
                    		RESULT = _2;
                    	} else {
                        	RESULT = _1;
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$17 T_LPAREN OptParamList T_RPAREN NT$18 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3,_4);
						((MyParser) parser).AddParams(_4);
                        ((MyParser) parser).DoFuncDecl_2(_4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3,null,null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$14 T_LPAREN OptParamList T_RPAREN NT$15 T_LBRACE OptStmtList NT$16 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_2(_5, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3, _4);
						((MyParser) parser).AddParams(_4);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,(Type)_1,(String)_2);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FuncDef2 ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$11 T_LPAREN OptParamList T_RPAREN NT$12 T_LBRACE OptStmtList NT$13 T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*FuncDef2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                       RESULT =  ((MyParser) parser).FieldFuncDef(_5, _3);
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3, _4);
						((MyParser) parser).AddParams(_4);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,(Type)_1,(String)_2);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldFuncDecl ::= FuncDef2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(60/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(81/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FieldFuncsList ::= FieldFuncDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(81/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptFieldFuncsList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(80/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DtorDef ::= T_TILDE T_ID_U NT$10 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoCtorDtorDecl(_5, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1_DTOR("~" + _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CtorDef ::= T_ID_U NT$8 T_LPAREN OptParamList T_RPAREN NT$9 T_LBRACE OptStmtList T_RBRACE 
            {
              STO RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoCtorDtorDecl(_5, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParamsCtor(_3,_4);
                        ((MyParser) parser).AddParams(_4);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,null,null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CtorDtorDecl ::= DtorDef 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CtorDtorDecl ::= CtorDef 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(59/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _2;
    					RESULT.addElement(_3);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(79/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CtorDtorList ::= CtorDtorDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(79/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OptCtorDtorList ::= 
            {
              Vector RESULT = null;
		
    					RESULT = new Vector();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OptCtorDtorList ::= CtorDtorList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						RESULT = ((MyParser) parser).DoVarDeclStruct (_2, _1, (VarSTO)_3);
					
              CUP$parser$result = new java_cup.runtime.Symbol(55/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    					RESULT = _1;
    					RESULT.addElement(_2);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(82/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FieldVarsList ::= FieldVarDecl 
            {
              Vector RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = new Vector();
						RESULT.addElement(_3);			
					
              CUP$parser$result = new java_cup.runtime.Symbol(82/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UnarySign ::= T_MINUS 
            {
              Object RESULT = null;
		
						RESULT = "-";
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UnarySign ::= T_PLUS 
            {
              Object RESULT = null;
		
						RESULT = "+";
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$5 FieldVarsList OptCtorDtorList NT$6 OptFieldFuncsList NT$7 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
  
                       ((MyParser) parser).insertFuncSTO(_4, _1);
                       STO stru = ((MyParser) parser).getStructKept();
                       Scope s = ((MyParser) parser).DoBlockClose();
                       ((MyParser) parser).DoStructdefDecl (_1, s, _2, _3, _4, stru);
                       ((MyParser) parser).structKeeper = null; 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                    	boolean hasCtor = false;
                        for(int i = 0; i< _3.size(); i++){
                        	FuncSTO func = (FuncSTO)_3.get(i); 
                        	if(func.getName().equals(_1)){
                        		hasCtor = true;
                        	}
                        }
                        if(!(hasCtor))	//DEFAULT CTOR
   							_3.addElement(new FuncSTO(_1)); 
						((MyParser) parser).insertVarSTO(_2);
   					    ((MyParser) parser).insertCtorDtorSTO(_3, _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        StructdefSTO stru = new StructdefSTO(_1); 
                        ((MyParser) parser).insertStruct(stru);
                        ((MyParser) parser).structKept(stru);
                        ((MyParser) parser).DoBlockOpen();
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptStatic ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptStatic ::= T_STATIC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoConstDecl (_3, _2,(STO)_5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl_Struct (_3,_2,_4, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl (_3, _2, _4, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

