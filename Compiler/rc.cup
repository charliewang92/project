
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
// 
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND, 
    T_ARROW,
    T_ASSIGN,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_MINUSMINUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_WHILE,
    T_VOID,
    T_NEW,
    T_DELETE
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    OptStatic,
    StructdefDecl,
    OptRef,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReadStmt,
    WriteStmt,
    WritePairList,
    WritePair,
    UnarySign,
    Equality,
    Relation,
    NewStmt,
    DeleteStmt,
    AddOp,
    MulOp,
    IncDecOp,
    ParamDecl
    ;

non terminal String      
    ;

non terminal STO
    ConstExpr,
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    OptInit,
    ReturnStmt,
    ArrayList,
    OptArrayList,
    Array,
   	FieldVarDecl,
   	CtorDef,
    DtorDef,
    FuncDef2,
    CtorDtorDecl,
    FieldFuncDecl
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
	OptPointerList,
    PointerList,
    Pointer,
    ReturnType
    ;

non terminal Vector
    OptParamList,
    ParamList,
    OptExprList,
    ExprList,
    OptStmtList,
	OptCtorCall,
    CtorCall,
    StmtList,
    OptCtorDtorList,
    CtorDtorList,
    OptFieldFuncsList,
    FieldFuncsList,
    FieldVarsList
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::=     GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=      ExternDecl
    |               VarDecl
    |               ConstDecl
    |               StructdefDecl
    |               FuncDecl
    |               FuncDef
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        ((MyParser) parser).DoExternDecl (_3);
                    :}
                    T_SEMI
    ;


VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        ((MyParser) parser).DoVarDecl (_3, _2, _4, _5);
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:
                        ((MyParser) parser).DoVarDecl_Struct (_3,_2,_4, _5);
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        ((MyParser) parser).DoConstDecl (_3, _2,(STO)_5);
                    :}
                    T_SEMI
    ;


OptStatic ::=       T_STATIC
    |               /* empty */
    ;


StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        StructdefSTO stru = new StructdefSTO(_1); 
                        ((MyParser) parser).insertStruct(stru);
                        ((MyParser) parser).structKept(stru);
                        ((MyParser) parser).DoBlockOpen();
                        
                    :}
                    FieldVarsList:_2
                    OptCtorDtorList: _3
                    {:
                    	boolean hasCtor = false;
                        for(int i = 0; i< _3.size(); i++){
                        	FuncSTO func = (FuncSTO)_3.get(i); 
                        	if(func.getName().equals(_1)){
                        		hasCtor = true;
                        	}
                        }
                        if(!(hasCtor))	//DEFAULT CTOR
   							_3.addElement(new FuncSTO(_1)); 
						((MyParser) parser).insertVarSTO(_2);
   					    ((MyParser) parser).insertCtorDtorSTO(_3, _1);
                    :}
                    OptFieldFuncsList:_4
                    {:  
                       ((MyParser) parser).insertFuncSTO(_4, _1);
                       STO stru = ((MyParser) parser).getStructKept();
                       Scope s = ((MyParser) parser).DoBlockClose();
                       ((MyParser) parser).DoStructdefDecl (_1, s, _2, _3, _4, stru);
                       ((MyParser) parser).structKeeper = null; 
                    :}
                    T_RBRACE T_SEMI
    ;

UnarySign ::=		T_PLUS
					{:
						RESULT = "+";
					:}
	|				T_MINUS
					{:
						RESULT = "-";
					:}
	;

FieldVarsList ::= 	FieldVarDecl:_3
					{:
						RESULT = new Vector();
						RESULT.addElement(_3);			
					:}
    |               FieldVarsList:_1 FieldVarDecl:_2
    				{:
    					RESULT = _1;
    					RESULT.addElement(_2);
    				:}
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_2 OptArrayList:_3 T_SEMI
					{:
						RESULT = ((MyParser) parser).DoVarDeclStruct (_2, _1, (VarSTO)_3);
					:}
    ;

OptCtorDtorList ::= CtorDtorList:_1
					{:
						RESULT = _1;
					:}
					
    |				{:
    					RESULT = new Vector();
    				:}
    ;


CtorDtorList ::=    CtorDtorDecl:_1
					{:
						RESULT = new Vector();
						RESULT.addElement(_1);
					:}
    |               CtorDtorList:_2 CtorDtorDecl:_3
    				{:
    					RESULT = _2;
    					RESULT.addElement(_3);
    				:}
    ;

CtorDtorDecl ::=    CtorDef:_1
					{:
						RESULT = _1;
					:}
    |               DtorDef:_2
    				{:
    					RESULT = _2;
    				:}
    ;


CtorDef ::=         T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,null,null);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParamsCtor(_3,_4);
                        ((MyParser) parser).AddParams(_4);
                        
                    :}
                    T_LBRACE OptStmtList:_5 T_RBRACE
                    {:
                        RESULT = ((MyParser) parser).DoCtorDtorDecl(_5, _3);
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1_DTOR("~" + _3);
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList:_5 T_RBRACE
                    {:
                        RESULT = ((MyParser) parser).DoCtorDtorDecl(_5, _3);
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList:_1
					{:
						RESULT = _1;
					:}
    |               {:
    					RESULT = new Vector();
    				:}
    ;


FieldFuncsList ::=  FieldFuncDecl:_1
					{:
						RESULT = new Vector();
						RESULT.addElement(_1);
					:}
    |               FieldFuncsList:_2 FieldFuncDecl:_3
    				{:
    					RESULT = _2;
    					RESULT.addElement(_3);
    				:}
    ;


FieldFuncDecl ::=   FuncDef2:_1
					{:
						RESULT = _1;
					:}
    ;
    
FuncDef2	::=		T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,(Type)_1,(String)_2);
                        
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3, _4);
						((MyParser) parser).AddParams(_4);
                        
                    :}
                    T_LBRACE OptStmtList:_5
                    {:
                       RESULT =  ((MyParser) parser).FieldFuncDef(_5, _3);
                       
                    :}
                    T_RBRACE
    ;

FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3,(Type)_1,(String)_2);
                        
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3, _4);
						((MyParser) parser).AddParams(_4);
                        
                    :}
                    T_LBRACE OptStmtList:_5
                    {:
                        ((MyParser) parser).DoFuncDecl_2(_5, _3);
                    :}
                    T_RBRACE
    ;


FuncDecl ::=        T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3,null,null);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3,_4);
						((MyParser) parser).AddParams(_4);
                        ((MyParser) parser).DoFuncDecl_2(_4, _3);
                    :}
                    T_SEMI
    ;


Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}                   
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                    	if (_2 != null) {
                    		PointerType typ = ((PointerType)_2).getLastPointerType();
                    		typ.setType(_1);
                    		RESULT = _2;
                    	} else {
                        	RESULT = _1;
                        }
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                    	if (_2 != null) {
                    		PointerType typ = ((PointerType)_2).getLastPointerType();
                        	typ.setType(_1);
                        	//_1.setName(_1.getName() + _2.getName());
                        	RESULT = _2;
                        }
                        else
                        	RESULT = _1;
                    :}
    ;


BasicType ::=       T_INT
                    {:
                        RESULT = new IntType();  // gotta do something here!
                    :}
    |               T_FLOAT
                    {:
                        RESULT = new FloatType();  // gotta do something here!
                    :}
    |               T_BOOL
                    {:
                        RESULT = new BoolType();  // gotta do something here!
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID
    ;


OptPointerList ::=  PointerList:_1
					{:
						RESULT = _1;
					:}
    |				{:
    					RESULT = null;
    				:}
    ;

PointerList ::=     Pointer:_1
					{:
						RESULT = _1; 
					:}
    |               PointerList:_1 Pointer:_2
    				{:
    					RESULT = _1;
    					((PointerType)(RESULT)).getLastPointerType().setType(_2);
    					//_2.setName(_1.getName() + _2.getName());
    				:}
    ;


Pointer ::=         T_STAR
					{:
						RESULT = new PointerType("*", 4); 
					:}
    ;


OptArrayList ::=    ArrayList:_1
    				{:
    					RESULT = _1;
    				:}
    |				{:
    					RESULT = null;
    				:}
    ;

ArrayList ::=       Array:_1
					{:
						RESULT = _1;
					:}
    |               ArrayList:_1 Array:_2
    				{:
						RESULT = _1;
						ArrayType typ = (ArrayType)((VarSTO)_1).getType();
						if (typ.getArrayType() instanceof ArrayType) {
							ArrayType type2 = (ArrayType)typ.getArrayType();
							type2.setType(_2);
						}
    				:}	
    ;

Array ::=           T_LBRACKET ConstExpr:_1 T_RBRACKET
					{:
						RESULT = new VarSTO("array",new ArrayType((STO)_1));
					:}
    ;


CodeBlock ::=       T_LBRACE
                    {: 
                       ((MyParser) parser).DoBlockOpen(); 
                    :}
                    OptStmtList:_1
                    {:
                    ((MyParser) parser).ReadCodeBlock(_1); 
                    ((MyParser) parser).DoBlockClose();
                    
                    :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList:_1          
    				{:
    					RESULT = _1;
    				:}
    				
    |				{:
    					RESULT = new Vector<STO>(); 
    				:}
    ;


StmtList ::=        Stmt:_1
					{:
						RESULT = new Vector<ReturnSTO>();
						
						if (_1 != null) {
								RESULT.addElement((STO)_1); 
						}
					:}
    |               StmtList:_3 Stmt:_2
 	 	  			{:
 	 	  				RESULT = _3;
 	 	  				if (_2 != null) {
    						RESULT.addElement((STO)_2);
    					}
    				:}
    ;


Stmt ::=            VarDecl
    |               ConstDecl
    |               CodeBlock
    |               Expr:_1 T_SEMI 
    				{:
    					RESULT = _1;
    				:}
    |               IfStmt
    |               WhileStmt:_1
    				{:
    					RESULT = _1;
    				:} 
    |               ForeachStmt
    |               BreakStmt:_1
    				{:
    					((MyParser) parser).checkCodeBlock((STO)_1); 
    					RESULT = _1;
    				:}
    |               ContinueStmt:_1
    				{:
    					((MyParser) parser).checkCodeBlock((STO)_1); 
    					RESULT = _1;
    				:}
    |               ExitStmt:_1
    				{:
    					RESULT = _1;
    				:}
    |               ReturnStmt:_2
    				{:
    					RESULT = _2;
    				:}
    |               ReadStmt
    |               WriteStmt
    |				NewStmt
    |				DeleteStmt
    ;


OptParamList ::=    ParamList:_1
    				{:
    					RESULT = _1;
    				:}
    				
    |				{:
    					RESULT = new Vector(); 
    				:}
    ;


ParamList ::=       ParamDecl:_2
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    :}
    |               ParamList:_1 T_COMMA ParamDecl:_2
                    {:
                        RESULT = _1;
                        RESULT.addElement (_2);
                    :}				
    ;


ParamDecl ::=       Type:_2 OptRef:_3 T_ID:_1 OptArrayList:_4
					{:
						RESULT =  ((MyParser) parser).createNewVarSTO(_1,_2,(String)_3,_4); 
						//RESULT = new VarSTO(_1, _2, (String) _3, _4);
					:}
    ;


OptRef ::=          T_AMPERSAND
					{:
						RESULT = "true";
					:}
    |               
    ;


OptInit ::=         T_ASSIGN Expr:_1
					{:
					RESULT = _1; 
					:}
					
    |               /* empty 	 */
    ;


OptCtorCall ::=     CtorCall:_1
					{:
						RESULT = _1; 
					:}
    |               {:
    					RESULT = null;
    				:}
    ;


CtorCall ::=        T_COLON T_LPAREN OptExprList:_1 T_RPAREN
					{:
							RESULT = _1;
					:}
    ;


IfStmt ::=          T_IF Expr:_1 CodeBlock:_2 OptElse
					{:
						((MyParser) parser).DoIfStmt(_1);
					:}
    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr:_1 
					{:
					   ((MyParser) parser).incrementCodeBlockCounter(); 
					   ((MyParser) parser).DoWhileStmt(_1);
					:}
					CodeBlock
					{:
						((MyParser) parser).decrementCodeBlockCounter();
						//((MyParser) parser).DoBlockClose();
					:}
    ;			


ForeachStmt ::=     T_FOREACH T_LPAREN Type:_1 OptRef T_ID:_3 T_COLON Expr:_4 T_RPAREN
                    {:
                    	((MyParser) parser).incrementCodeBlockCounter();
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoVarDecl (_3, _1, null,null);
                        ((MyParser) parser).DoForEachCheck(_3,_4);
                    :}
                    CodeBlock
                    {:
                    	((MyParser) parser).decrementCodeBlockCounter();
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
    				{:
						RESULT = new BreakSTO("break");
					:}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
					{:
						RESULT = new ContinueSTO("continue");
					:}
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
					{:
						RESULT = new ExitSTO("exit",_1.getType());
						((MyParser) parser).DoExitStmtChecks((ExitSTO)RESULT);
					:}
    ;


ReturnStmt ::=      T_RETURN T_SEMI
					{:
						RESULT = new ReturnSTO("return", null);  
					:}
    |               T_RETURN Expr:_1 T_SEMI
    				{:
    					RESULT = new ReturnSTO("return", _1);
    				:}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList T_SEMI
    ;


WritePairList ::=   WritePair
    |               WritePairList T_OSTREAM WritePair
    ;


WritePair ::=       Expr
    |               T_ENDL
    ;


ConstExpr ::=       Expr:_1
					{:
						RESULT = _1;
					:}
    ;


OptExprList ::=     ExprList:_1
    				{:	
    					RESULT = _1; 
    				:}  
    				
    |				{:
    					RESULT = new Vector();
    				:}           
    ;


ExprList ::=        Expr:_1
					{:
						RESULT = new Vector();
						RESULT.addElement(_1);
					:}
					
    |               ExprList:_1 T_COMMA Expr:_2
    				{:	
    					RESULT = _1; 
    					RESULT.addElement(_2);
    				:}
    
    
    ;


Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                        RESULT = ((MyParser) parser).DoAssignExpr (_1,_2);
                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr0 ::=           Expr0:_1 T_OR Expr1:_3
                    {:
                      RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOperator(), _3);

                    :}	
    |               Expr1:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr1 ::=           Expr1:_1 T_AND Expr2:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOperator(), _3);
                    :}
    |               Expr2:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr2 ::=           Expr2:_1 T_BAR Expr3:_3
                    {:
                       	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwOrOperator(), _3);

                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=           Expr3:_1 T_CARET Expr4:_3
                    {:
						RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwXorOperator(), _3);
						
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=           Expr4:_1 T_AMPERSAND Expr5:_3
                    {:
                    	RESULT = ((MyParser) parser).DoBinaryExpr (_1, new BwAndOperator(), _3);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                    	RESULT = ((MyParser) parser).DoBinaryExpr (_1, (ComparisonOperator)_2, _3);
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                       RESULT = ((MyParser) parser).DoBinaryExpr (_1, (ComparisonOperator)_2, _3);
                        
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, (Operator)_2, _3);
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=           Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, (Operator)_2, _3);
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=        T_EQU
					{:
						RESULT = new EQUOperator();
						((EQUOperator) RESULT).setName("=="); 
					:}
    |               T_NEQ
    				{:
    					RESULT = new NEQOperator();
    					((NEQOperator) RESULT).setName("!="); 
    				:}
    ;


Relation ::=        T_LT
					{:
						RESULT = new LTOperator();
					:}
    |               T_GT
    				{:
    					RESULT = new GTOperator();
    				:}
    |               T_LTE
    				{:
    					RESULT = new LTEOperator();
    				:}
    |               T_GTE
    				{:
    					RESULT = new GTEOperator();
    				:}
    ;


AddOp ::=           T_PLUS
                    {:
                        RESULT = new AddOperator();
                    :}
    |               T_MINUS
                    {:
                        RESULT = new MinusOperator();
                    :}
    ;


MulOp ::=           T_STAR
                    {:
                        RESULT = new MultiplyOperator();
                    :}
    |               T_SLASH
                    {:
                        RESULT = new DivideOperator();
                    :}
    |               T_MOD
                    {:
                        RESULT = new ModOperator();
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = new IncrementOperator();
                        ((IncrementOperator) RESULT).setName("++"); 
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = new DecrementOperator();
                        ((DecrementOperator)RESULT).setName("--"); 
                    :}
    ;


Designator ::=      T_STAR Designator:_1
                    {:
						
                        RESULT = ((MyParser) parser).DoStarCheck(_1); 
                    :}
                    
    |               T_AMPERSAND Designator:_1
                    {:
                    	RESULT = ((MyParser) parser).setPassByReference(_1);
                    	//RESULT = _1;
                   	:}
                   	
    |               UnarySign:_1 Designator:_2
                    {:
						if (((String)_1).equals("-"))
							RESULT = ((MyParser) parser).DoNegate(_2);
						else	
							RESULT = _2;
                    :}
    |               T_NOT Designator:_1
                    {:
                              
                    RESULT = ((MyParser) parser).DoBinaryExpr (null, new NotOperator(), _1);
                        
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
                    	RESULT =  ((MyParser) parser).calcSizeOf(_2); 
                        //RESULT = new ConstSTO("sizeof variable - fix me", null, 0);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 OptArrayList:_1 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).calcSizeOfArray(_2, _1); 
                        
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                    	RESULT =  ((MyParser) parser).DoTypeCast(_1, _2); 
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoPrePostIncDecExpr(_2,(UnaryOperator)_1);
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;

Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
          	              RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET 
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (((MyParser) parser).DoBracketCheck(_1), _2);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_2
                    {:
                        RESULT = ((MyParser) parser).DoArrowCheck(_1,_2);
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
						RESULT = ((MyParser) parser).DoPrePostIncDecExpr(_1,(UnaryOperator)_2);
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoFuncCall (_1,_2);
                         //RESULT = _1;
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        ConstSTO con = new ConstSTO (_1, new IntType(), Integer.parseInt(_1));    // fix me!
                        con.isLiteral = true;
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con; 
                        
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        ConstSTO con = new ConstSTO (_1, new FloatType(), Double.parseDouble(_1));
                        con.isLiteral = true; 
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con;   // fix me!
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE:_1
                    {:
                        ConstSTO con = new ConstSTO ("true",new BoolType() , 1);    
                        con.isLiteral = true; 
                        con.setIsAddressable(false);
                        con.setIsModifiable(false);
                        RESULT = con;   // fix me!
                    :}
    |               T_FALSE:_1
                    {:
                        ConstSTO con = new ConstSTO ("false", new BoolType(), 0);   
                        con.isLiteral = true; 
                        RESULT = con;   // fix me!
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("null",4));     // fix me!
                    :}
    |               T_THIS
                    {:
                        RESULT = new ExprSTO ("this", new ThisType(((MyParser) parser).GetStructName()));              // fix me!
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3Global_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}	
    ;
    
NewStmt 	::=		T_NEW Designator:_1 OptCtorCall:_2 T_SEMI 
					{:
							
						 ((MyParser) parser).checkNewStmt(_1, _2);
						 
					:}
    ;
    
DeleteStmt 	::= 	T_DELETE Designator:_1 T_SEMI
					{:
						((MyParser) parser).checkDeleteStmt(_1); 
						
					:}
    ;
    
     
    
